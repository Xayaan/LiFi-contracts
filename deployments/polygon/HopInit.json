{
  "address": "0xee6E6aA17ad1A7d7F789445B828d1d20454b7827",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_tokens",
          "type": "string[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "hToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            }
          ],
          "internalType": "struct IHopBridge.BridgeConfig[]",
          "name": "_bridgeConfigs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe83f0dd2237fba505a19f8f817d01ceb1698493f4090e002ccc8d15bed44cf07",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xCB1e9fA11Edd27098A6B2Ff23cB6b79183ccf8Ee",
    "contractAddress": null,
    "transactionIndex": 27,
    "gasUsed": "476066",
    "logsBloom": "0x
    "blockHash": "0xf22e20a540d326e2119ed0b5733d47e1af7eda2b99d20d1c9c3ded7980af4d7b",
    "transactionHash": "0xe83f0dd2237fba505a19f8f817d01ceb1698493f4090e002ccc8d15bed44cf07",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 20243551,
        "transactionHash": "0xe83f0dd2237fba505a19f8f817d01ceb1698493f4090e002ccc8d15bed44cf07",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cb1e9fa11edd27098a6b2ff23cb6b79183ccf8ee",
          "0x000000000000000000000000959c65b72147faf3450d8b50a0de57e72ffc5e0d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003329a148cb4d00000000000000000000000000000000000000000000000000136aeeb87892035c0000000000000000000000000000000000000000000000d30c21b72dd06563890000000000000000000000000000000000000000000000001337c5172fc6b65c0000000000000000000000000000000000000000000000d30c54e0cf1930b089",
        "logIndex": 132,
        "blockHash": "0xf22e20a540d326e2119ed0b5733d47e1af7eda2b99d20d1c9c3ded7980af4d7b"
      }
    ],
    "blockNumber": 20243551,
    "cumulativeGasUsed": "4874827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0afe9d71136b27bba4376c61e34b7e04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tokens\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"internalType\":\"struct IHopBridge.BridgeConfig[]\",\"name\":\"_bridgeConfigs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/UpgradeInit/HopInit.sol\":\"HopInit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Interfaces/IHopBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IHopBridge {\\n    struct BridgeConfig {\\n        address token;\\n        address hToken;\\n        address bridge;\\n    }\\n\\n    function sendToL2(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 relayerFee\\n    ) external payable;\\n\\n    function send(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 relayerFee,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe6d20c22e4f9d46b858990955e6e279c022c3f9c35ccbc415db488a15c6e52bf\",\"license\":\"MIT\"},\"src/Interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\ninterface ITransactionManager {\\n    // Structs\\n\\n    // Holds all data that is constant between sending and\\n    // receiving chains. The hash of this is what gets signed\\n    // to ensure the signature can be used on both chains.\\n    struct InvariantTransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address initiator; // msg.sender of sending side\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback; // funds sent here on cancel\\n        address receivingAddress;\\n        address callTo;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        bytes32 callDataHash; // hashed to prevent free option\\n        bytes32 transactionId;\\n    }\\n\\n    // Holds all data that varies between sending and receiving\\n    // chains. The hash of this is stored onchain to ensure the\\n    // information passed in is valid.\\n    struct VariantTransactionData {\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber;\\n    }\\n\\n    // All Transaction data, constant and variable\\n    struct TransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address initiator; // msg.sender of sending side\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback;\\n        address receivingAddress;\\n        address callTo;\\n        bytes32 callDataHash;\\n        bytes32 transactionId;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n    }\\n\\n    // The structure of the signed data for fulfill\\n    struct SignedFulfillData {\\n        bytes32 transactionId;\\n        uint256 relayerFee;\\n        string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n        uint256 receivingChainId; // For domain separation\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    // The structure of the signed data for cancellation\\n    struct SignedCancelData {\\n        bytes32 transactionId;\\n        string functionIdentifier;\\n        uint256 receivingChainId;\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    /**\\n     * Arguments for calling prepare()\\n     * @param invariantData The data for a crosschain transaction that will\\n     *                      not change between sending and receiving chains.\\n     *                      The hash of this data is used as the key to store\\n     *                      the inforamtion that does change between chains\\n     *                      (amount,expiry,preparedBlock) for verification\\n     * @param amount The amount of the transaction on this chain\\n     * @param expiry The block.timestamp when the transaction will no longer be\\n     *               fulfillable and is freely cancellable on this chain\\n     * @param encryptedCallData The calldata to be executed when the tx is\\n     *                          fulfilled. Used in the function to allow the user\\n     *                          to reconstruct the tx from events. Hash is stored\\n     *                          onchain to prevent shenanigans.\\n     * @param encodedBid The encoded bid that was accepted by the user for this\\n     *                   crosschain transfer. It is supplied as a param to the\\n     *                   function but is only used in event emission\\n     * @param bidSignature The signature of the bidder on the encoded bid for\\n     *                     this transaction. Only used within the function for\\n     *                     event emission. The validity of the bid and\\n     *                     bidSignature are enforced offchain\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct PrepareArgs {\\n        InvariantTransactionData invariantData;\\n        uint256 amount;\\n        uint256 expiry;\\n        bytes encryptedCallData;\\n        bytes encodedBid;\\n        bytes bidSignature;\\n        bytes encodedMeta;\\n    }\\n\\n    /**\\n     * @param txData All of the data (invariant and variant) for a crosschain\\n     *               transaction. The variant data provided is checked against\\n     *               what was stored when the `prepare` function was called.\\n     * @param relayerFee The fee that should go to the relayer when they are\\n     *                   calling the function on the receiving chain for the user\\n     * @param signature The users signature on the transaction id + fee that\\n     *                  can be used by the router to unlock the transaction on\\n     *                  the sending chain\\n     * @param callData The calldata to be sent to and executed by the\\n     *                 `FulfillHelper`\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct FulfillArgs {\\n        TransactionData txData;\\n        uint256 relayerFee;\\n        bytes signature;\\n        bytes callData;\\n        bytes encodedMeta;\\n    }\\n\\n    /**\\n     * Arguments for calling cancel()\\n     * @param txData All of the data (invariant and variant) for a crosschain\\n     *               transaction. The variant data provided is checked against\\n     *               what was stored when the `prepare` function was called.\\n     * @param signature The user's signature that allows a transaction to be\\n     *                  cancelled by a relayer\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct CancelArgs {\\n        TransactionData txData;\\n        bytes signature;\\n        bytes encodedMeta;\\n    }\\n\\n    // Adding/removing asset events\\n    event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n    event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n    // Adding/removing router events\\n    event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n    event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n    // Liquidity events\\n    event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\\n\\n    event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\\n\\n    // Transaction events\\n    event TransactionPrepared(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        TransactionData txData,\\n        address caller,\\n        PrepareArgs args\\n    );\\n\\n    event TransactionFulfilled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        FulfillArgs args,\\n        bool success,\\n        bool isContract,\\n        bytes returnData,\\n        address caller\\n    );\\n\\n    event TransactionCancelled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        CancelArgs args,\\n        address caller\\n    );\\n\\n    // Getters\\n    function getChainId() external view returns (uint256);\\n\\n    function getStoredChainId() external view returns (uint256);\\n\\n    // Owner only methods\\n    function addRouter(address router) external;\\n\\n    function removeRouter(address router) external;\\n\\n    function addAssetId(address assetId) external;\\n\\n    function removeAssetId(address assetId) external;\\n\\n    // Router only methods\\n    function addLiquidityFor(\\n        uint256 amount,\\n        address assetId,\\n        address router\\n    ) external payable;\\n\\n    function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        address assetId,\\n        address payable recipient\\n    ) external;\\n\\n    // Methods for crosschain transfers\\n    // called in the following order (in happy case)\\n    // 1. prepare by user on sending chain\\n    // 2. prepare by router on receiving chain\\n    // 3. fulfill by user on receiving chain\\n    // 4. fulfill by router on sending chain\\n    function prepare(PrepareArgs calldata args) external payable returns (TransactionData memory);\\n\\n    function fulfill(FulfillArgs calldata args) external returns (TransactionData memory);\\n\\n    function cancel(CancelArgs calldata args) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0xbf46be449c1ae9465c5d464cd102b1ac4ee038bfe20c693f3f5a9775a368b1b9\",\"license\":\"UNLICENSED\"},\"src/Libraries/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport { ITransactionManager } from \\\"../Interfaces/ITransactionManager.sol\\\";\\nimport { IHopBridge } from \\\"../Interfaces/IHopBridge.sol\\\";\\n\\nstruct AppStorage {\\n    ITransactionManager nxtpTxManager;\\n    mapping(string => IHopBridge.BridgeConfig) hopBridges;\\n    uint256 hopChainId;\\n    // Only add new variables *BELOW* the last variable\\n}\\n\",\"keccak256\":\"0xd8c2889e0a5e6e70ffe1228f397f6b0d3a8e6b08fc60209481be8478812f9bef\",\"license\":\"MIT\"},\"src/UpgradeInit/HopInit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { AppStorage } from \\\"../Libraries/AppStorage.sol\\\";\\nimport { IHopBridge } from \\\"../Interfaces/IHopBridge.sol\\\";\\n\\ncontract HopInit {\\n    AppStorage internal s;\\n\\n    function init(\\n        string[] memory _tokens,\\n        IHopBridge.BridgeConfig[] memory _bridgeConfigs,\\n        uint256 _chainId\\n    ) external {\\n        for (uint8 i; i < _tokens.length; i++) {\\n            s.hopBridges[_tokens[i]] = _bridgeConfigs[i];\\n        }\\n        s.hopChainId = _chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xfd716180a5db5ea54beea233d67b489e338fbdefe820a338d94e47fa2fd567ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107a7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c01f5df014610030575b600080fd5b61004a6004803603810190610045919061040a565b61004c565b005b60005b83518160ff1610156101a257828160ff1681518110610071576100706106b6565b5b60200260200101516000600101858360ff1681518110610094576100936106b6565b5b60200260200101516040516100a991906104c6565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050808061019a9061065d565b91505061004f565b5080600060020181905550505050565b60006101c56101c084610502565b6104dd565b905080838252602082019050828560208602820111156101e8576101e761071e565b5b60005b8581101561023657813567ffffffffffffffff81111561020e5761020d610714565b5b80860161021b8982610363565b855260208501945060208401935050506001810190506101eb565b5050509392505050565b600061025361024e8461052e565b6104dd565b905080838252602082019050828560608602820111156102765761027561071e565b5b60005b858110156102a6578161028c8882610391565b845260208401935060608301925050600181019050610279565b5050509392505050565b60006102c36102be8461055a565b6104dd565b9050828152602081018484840111156102df576102de610723565b5b6102ea8482856105ea565b509392505050565b60008135905061030181610743565b92915050565b600082601f83011261031c5761031b610714565b5b813561032c8482602086016101b2565b91505092915050565b600082601f83011261034a57610349610714565b5b813561035a848260208601610240565b91505092915050565b600082601f83011261037857610377610714565b5b81356103888482602086016102b0565b91505092915050565b6000606082840312156103a7576103a6610719565b5b6103b160606104dd565b905060006103c1848285016102f2565b60008301525060206103d5848285016102f2565b60208301525060406103e9848285016102f2565b60408301525092915050565b6000813590506104048161075a565b92915050565b6000806000606084860312156104235761042261072d565b5b600084013567ffffffffffffffff81111561044157610440610728565b5b61044d86828701610307565b935050602084013567ffffffffffffffff81111561046e5761046d610728565b5b61047a86828701610335565b925050604061048b868287016103f5565b9150509250925092565b60006104a08261058b565b6104aa8185610596565b93506104ba8185602086016105f9565b80840191505092915050565b60006104d28284610495565b915081905092915050565b60006104e76104f8565b90506104f3828261062c565b919050565b6000604051905090565b600067ffffffffffffffff82111561051d5761051c6106e5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610549576105486106e5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610575576105746106e5565b5b61057e82610732565b9050602081019050919050565b600081519050919050565b600081905092915050565b60006105ac826105b3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156106175780820151818401526020810190506105fc565b83811115610626576000848401525b50505050565b61063582610732565b810181811067ffffffffffffffff82111715610654576106536106e5565b5b80604052505050565b6000610668826105dd565b915060ff82141561067c5761067b610687565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61074c816105a1565b811461075757600080fd5b50565b610763816105d3565b811461076e57600080fd5b5056fea26469706673582212201fdf704649d892fe9542cb5e63968fd0ca72adc431a2fa92a30123833e83915e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c01f5df014610030575b600080fd5b61004a6004803603810190610045919061040a565b61004c565b005b60005b83518160ff1610156101a257828160ff1681518110610071576100706106b6565b5b60200260200101516000600101858360ff1681518110610094576100936106b6565b5b60200260200101516040516100a991906104c6565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050808061019a9061065d565b91505061004f565b5080600060020181905550505050565b60006101c56101c084610502565b6104dd565b905080838252602082019050828560208602820111156101e8576101e761071e565b5b60005b8581101561023657813567ffffffffffffffff81111561020e5761020d610714565b5b80860161021b8982610363565b855260208501945060208401935050506001810190506101eb565b5050509392505050565b600061025361024e8461052e565b6104dd565b905080838252602082019050828560608602820111156102765761027561071e565b5b60005b858110156102a6578161028c8882610391565b845260208401935060608301925050600181019050610279565b5050509392505050565b60006102c36102be8461055a565b6104dd565b9050828152602081018484840111156102df576102de610723565b5b6102ea8482856105ea565b509392505050565b60008135905061030181610743565b92915050565b600082601f83011261031c5761031b610714565b5b813561032c8482602086016101b2565b91505092915050565b600082601f83011261034a57610349610714565b5b813561035a848260208601610240565b91505092915050565b600082601f83011261037857610377610714565b5b81356103888482602086016102b0565b91505092915050565b6000606082840312156103a7576103a6610719565b5b6103b160606104dd565b905060006103c1848285016102f2565b60008301525060206103d5848285016102f2565b60208301525060406103e9848285016102f2565b60408301525092915050565b6000813590506104048161075a565b92915050565b6000806000606084860312156104235761042261072d565b5b600084013567ffffffffffffffff81111561044157610440610728565b5b61044d86828701610307565b935050602084013567ffffffffffffffff81111561046e5761046d610728565b5b61047a86828701610335565b925050604061048b868287016103f5565b9150509250925092565b60006104a08261058b565b6104aa8185610596565b93506104ba8185602086016105f9565b80840191505092915050565b60006104d28284610495565b915081905092915050565b60006104e76104f8565b90506104f3828261062c565b919050565b6000604051905090565b600067ffffffffffffffff82111561051d5761051c6106e5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610549576105486106e5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610575576105746106e5565b5b61057e82610732565b9050602081019050919050565b600081519050919050565b600081905092915050565b60006105ac826105b3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156106175780820151818401526020810190506105fc565b83811115610626576000848401525b50505050565b61063582610732565b810181811067ffffffffffffffff82111715610654576106536106e5565b5b80604052505050565b6000610668826105dd565b915060ff82141561067c5761067b610687565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61074c816105a1565b811461075757600080fd5b50565b610763816105d3565b811461076e57600080fd5b5056fea26469706673582212201fdf704649d892fe9542cb5e63968fd0ca72adc431a2fa92a30123833e83915e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3205,
        "contract": "src/UpgradeInit/HopInit.sol:HopInit",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)2406_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITransactionManager)2389": {
        "encoding": "inplace",
        "label": "contract ITransactionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(BridgeConfig)2004_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IHopBridge.BridgeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(BridgeConfig)2004_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)2406_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 2398,
            "contract": "src/UpgradeInit/HopInit.sol:HopInit",
            "label": "nxtpTxManager",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ITransactionManager)2389"
          },
          {
            "astId": 2403,
            "contract": "src/UpgradeInit/HopInit.sol:HopInit",
            "label": "hopBridges",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_struct(BridgeConfig)2004_storage)"
          },
          {
            "astId": 2405,
            "contract": "src/UpgradeInit/HopInit.sol:HopInit",
            "label": "hopChainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(BridgeConfig)2004_storage": {
        "encoding": "inplace",
        "label": "struct IHopBridge.BridgeConfig",
        "members": [
          {
            "astId": 1999,
            "contract": "src/UpgradeInit/HopInit.sol:HopInit",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2001,
            "contract": "src/UpgradeInit/HopInit.sol:HopInit",
            "label": "hToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2003,
            "contract": "src/UpgradeInit/HopInit.sol:HopInit",
            "label": "bridge",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}