{
  "address": "0x551B5C9E16eD6E042ee17E911752c826Bc8C8B6e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LiFiTransferCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "integrator",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sendingAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LiFiTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lifiTransactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nxtpTransactionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receivingChainTxManagerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        }
      ],
      "name": "NXTPBridgeStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "completeBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNXTPTransactionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "receivingChainTxManagerAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "router",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initiator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "sendingAssetId",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receivingAssetId",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "sendingChainFallback",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receivingAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callTo",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sendingChainId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "receivingChainId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "callDataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "transactionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ITransactionManager.InvariantTransactionData",
              "name": "invariantData",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedCallData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encodedBid",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "bidSignature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encodedMeta",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITransactionManager.PrepareArgs",
          "name": "_nxtpData",
          "type": "tuple"
        }
      ],
      "name": "startBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approveTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibSwap.SwapData[]",
          "name": "_swapData",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "finalAssetId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapAndCompleteBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approveTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibSwap.SwapData[]",
          "name": "_swapData",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "receivingChainTxManagerAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "router",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initiator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "sendingAssetId",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receivingAssetId",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "sendingChainFallback",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receivingAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callTo",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sendingChainId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "receivingChainId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "callDataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "transactionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ITransactionManager.InvariantTransactionData",
              "name": "invariantData",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedCallData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encodedBid",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "bidSignature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encodedMeta",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITransactionManager.PrepareArgs",
          "name": "_nxtpData",
          "type": "tuple"
        }
      ],
      "name": "swapAndStartBridgeTokensViaNXTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e4403e38ff9861c39aab6cef24548936041c2b7be2297f439b1ce373a7239d2",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xCB1e9fA11Edd27098A6B2Ff23cB6b79183ccf8Ee",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "2498671",
    "logsBloom": "0x
    "blockHash": "0x72092f929f5556020dc3e65b0f2d004682fb46c6cbdfbc62bc070dbb5a422f41",
    "transactionHash": "0x5e4403e38ff9861c39aab6cef24548936041c2b7be2297f439b1ce373a7239d2",
    "logs": [],
    "blockNumber": 18584834,
    "cumulativeGasUsed": "2674767",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0632cc2764f3297423b8d8f36d28ae37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lifiTransactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nxtpTransactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"}],\"name\":\"NXTPBridgeStarted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"completeBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNXTPTransactionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedMeta\",\"type\":\"bytes\"}],\"internalType\":\"struct ITransactionManager.PrepareArgs\",\"name\":\"_nxtpData\",\"type\":\"tuple\"}],\"name\":\"startBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"finalAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapAndCompleteBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedMeta\",\"type\":\"bytes\"}],\"internalType\":\"struct ITransactionManager.PrepareArgs\",\"name\":\"_nxtpData\",\"type\":\"tuple\"}],\"name\":\"swapAndStartBridgeTokensViaNXTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"completeBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),address,address,uint256)\":{\"params\":{\"_lifiData\":\"data used purely for tracking and analytics\",\"amount\":\"number of tokens received\",\"assetId\":\"token received on the receiving chain\",\"receiver\":\"address that will receive the tokens\"}},\"startBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))\":{\"params\":{\"_lifiData\":\"data used purely for tracking and analytics\",\"_nxtpData\":\"data needed to complete an NXTP cross-chain transaction\"}},\"swapAndCompleteBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],address,address)\":{\"params\":{\"_lifiData\":\"data used purely for tracking and analytics\",\"_swapData\":\"array of data needed for swaps\",\"finalAssetId\":\"token received on the receiving chain\",\"receiver\":\"address that will receive the tokens\"}},\"swapAndStartBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))\":{\"params\":{\"_lifiData\":\"data used purely for tracking and analytics\",\"_nxtpData\":\"data needed to complete an NXTP cross-chain transaction\",\"_swapData\":\"array of data needed for swaps\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"completeBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),address,address,uint256)\":{\"notice\":\"Completes a cross-chain transaction on the receiving chain using the NXTP protocol.\"},\"getNXTPTransactionManager()\":{\"notice\":\"show the NXTP transaction manager contract address\"},\"startBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))\":{\"notice\":\"This function starts a cross-chain transaction using the NXTP protocol\"},\"swapAndCompleteBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],address,address)\":{\"notice\":\"Performs a swap before completing a cross-chain transaction         on the receiving chain using the NXTP protocol.\"},\"swapAndStartBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))\":{\"notice\":\"This function performs a swap or multiple swaps and then starts a cross-chain transaction         using the NXTP protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Facets/NXTPFacet.sol\":\"NXTPFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"src/Facets/NXTPFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ITransactionManager } from \\\"../Interfaces/ITransactionManager.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { AppStorage } from \\\"../Libraries/AppStorage.sol\\\";\\n\\ncontract NXTPFacet is ILiFi {\\n    /* ========== App Storage ========== */\\n\\n    AppStorage internal s;\\n\\n    /* ========== Events ========== */\\n\\n    event NXTPBridgeStarted(\\n        bytes32 indexed lifiTransactionId,\\n        bytes32 nxtpTransactionId,\\n        ITransactionManager.TransactionData txData\\n    );\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice This function starts a cross-chain transaction using the NXTP protocol\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _nxtpData data needed to complete an NXTP cross-chain transaction\\n     */\\n    function startBridgeTokensViaNXTP(LiFiData memory _lifiData, ITransactionManager.PrepareArgs calldata _nxtpData)\\n        public\\n        payable\\n    {\\n        // Ensure sender has enough to complete the bridge transaction\\n        address sendingAssetId = _nxtpData.invariantData.sendingAssetId;\\n        if (sendingAssetId == address(0)) require(msg.value == _nxtpData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        else {\\n            uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\\n            LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _nxtpData.amount);\\n            require(\\n                LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _nxtpData.amount,\\n                \\\"ERR_INVALID_AMOUNT\\\"\\n            );\\n        }\\n\\n        // Start the bridge process\\n        _startBridge(_lifiData.transactionId, _nxtpData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice This function performs a swap or multiple swaps and then starts a cross-chain transaction\\n     *         using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData array of data needed for swaps\\n     * @param _nxtpData data needed to complete an NXTP cross-chain transaction\\n     */\\n    function swapAndStartBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        ITransactionManager.PrepareArgs calldata _nxtpData\\n    ) public payable {\\n        address sendingAssetId = _nxtpData.invariantData.sendingAssetId;\\n        uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        require(\\n            LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance >= _nxtpData.amount,\\n            \\\"ERR_INVALID_AMOUNT\\\"\\n        );\\n\\n        _startBridge(_lifiData.transactionId, _nxtpData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Completes a cross-chain transaction on the receiving chain using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param assetId token received on the receiving chain\\n     * @param receiver address that will receive the tokens\\n     * @param amount number of tokens received\\n     */\\n    function completeBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        address assetId,\\n        address receiver,\\n        uint256 amount\\n    ) public payable {\\n        if (LibAsset.isNativeAsset(assetId)) {\\n            require(msg.value == amount, \\\"INVALID_ETH_AMOUNT\\\");\\n        } else {\\n            require(msg.value == 0, \\\"ETH_WITH_ERC\\\");\\n            LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\\n        }\\n\\n        LibAsset.transferAsset(assetId, payable(receiver), amount);\\n\\n        emit LiFiTransferCompleted(_lifiData.transactionId, assetId, receiver, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Performs a swap before completing a cross-chain transaction\\n     *         on the receiving chain using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData array of data needed for swaps\\n     * @param finalAssetId token received on the receiving chain\\n     * @param receiver address that will receive the tokens\\n     */\\n    function swapAndCompleteBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        address finalAssetId,\\n        address receiver\\n    ) public payable {\\n        uint256 startingBalance = LibAsset.getOwnBalance(finalAssetId);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        uint256 postSwapBalance = LibAsset.getOwnBalance(finalAssetId);\\n\\n        uint256 finalBalance;\\n\\n        if (postSwapBalance > startingBalance) {\\n            finalBalance = postSwapBalance - startingBalance;\\n            LibAsset.transferAsset(finalAssetId, payable(receiver), finalBalance);\\n        }\\n\\n        emit LiFiTransferCompleted(_lifiData.transactionId, finalAssetId, receiver, finalBalance, block.timestamp);\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    function _startBridge(bytes32 _transactionId, ITransactionManager.PrepareArgs calldata _nxtpData) internal {\\n        IERC20 sendingAssetId = IERC20(_nxtpData.invariantData.sendingAssetId);\\n\\n        // Give Connext approval to bridge tokens\\n        LibAsset.approveERC20(IERC20(sendingAssetId), address(s.nxtpTxManager), _nxtpData.amount);\\n\\n        uint256 value = LibAsset.isNativeAsset(address(sendingAssetId)) ? msg.value : 0;\\n\\n        // Initiate bridge transaction on sending chain\\n        ITransactionManager.TransactionData memory result = s.nxtpTxManager.prepare{ value: value }(_nxtpData);\\n\\n        emit NXTPBridgeStarted(_transactionId, result.transactionId, result);\\n    }\\n\\n    /* ========== Getter Functions ========== */\\n\\n    /**\\n     * @notice show the NXTP transaction manager contract address\\n     */\\n    function getNXTPTransactionManager() external view returns (address) {\\n        return address(s.nxtpTxManager);\\n    }\\n}\\n\",\"keccak256\":\"0x1fbfbe9541576e1490361889120b501a222d34832f7a5c44d55559598fbb6c42\",\"license\":\"MIT\"},\"src/Interfaces/IHopBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IHopBridge {\\n    struct BridgeConfig {\\n        address token;\\n        address hToken;\\n        address bridge;\\n    }\\n\\n    function sendToL2(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 relayerFee\\n    ) external payable;\\n\\n    function send(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 relayerFee,\\n        uint256 amountOutMin,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe6d20c22e4f9d46b858990955e6e279c022c3f9c35ccbc415db488a15c6e52bf\",\"license\":\"MIT\"},\"src/Interfaces/ILiFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ILiFi {\\n    /* ========== Structs ========== */\\n\\n    struct LiFiData {\\n        bytes32 transactionId;\\n        string integrator;\\n        address referrer;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address receiver;\\n        uint256 destinationChainId;\\n        uint256 amount;\\n    }\\n\\n    /* ========== Events ========== */\\n\\n    event LiFiTransferStarted(\\n        bytes32 indexed transactionId,\\n        string integrator,\\n        address referrer,\\n        address sendingAssetId,\\n        address receivingAssetId,\\n        address receiver,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        uint256 timestamp\\n    );\\n\\n    event LiFiTransferCompleted(\\n        bytes32 indexed transactionId,\\n        address receivingAssetId,\\n        address receiver,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n}\\n\",\"keccak256\":\"0x4f91e6e82057e44f0097e9355a60db3a5fb2f09a5cf7548bb51b40b444bf5aa1\",\"license\":\"MIT\"},\"src/Interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\ninterface ITransactionManager {\\n    // Structs\\n\\n    // Holds all data that is constant between sending and\\n    // receiving chains. The hash of this is what gets signed\\n    // to ensure the signature can be used on both chains.\\n    struct InvariantTransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address initiator; // msg.sender of sending side\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback; // funds sent here on cancel\\n        address receivingAddress;\\n        address callTo;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        bytes32 callDataHash; // hashed to prevent free option\\n        bytes32 transactionId;\\n    }\\n\\n    // Holds all data that varies between sending and receiving\\n    // chains. The hash of this is stored onchain to ensure the\\n    // information passed in is valid.\\n    struct VariantTransactionData {\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber;\\n    }\\n\\n    // All Transaction data, constant and variable\\n    struct TransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address initiator; // msg.sender of sending side\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback;\\n        address receivingAddress;\\n        address callTo;\\n        bytes32 callDataHash;\\n        bytes32 transactionId;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n    }\\n\\n    // The structure of the signed data for fulfill\\n    struct SignedFulfillData {\\n        bytes32 transactionId;\\n        uint256 relayerFee;\\n        string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n        uint256 receivingChainId; // For domain separation\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    // The structure of the signed data for cancellation\\n    struct SignedCancelData {\\n        bytes32 transactionId;\\n        string functionIdentifier;\\n        uint256 receivingChainId;\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    /**\\n     * Arguments for calling prepare()\\n     * @param invariantData The data for a crosschain transaction that will\\n     *                      not change between sending and receiving chains.\\n     *                      The hash of this data is used as the key to store\\n     *                      the inforamtion that does change between chains\\n     *                      (amount,expiry,preparedBlock) for verification\\n     * @param amount The amount of the transaction on this chain\\n     * @param expiry The block.timestamp when the transaction will no longer be\\n     *               fulfillable and is freely cancellable on this chain\\n     * @param encryptedCallData The calldata to be executed when the tx is\\n     *                          fulfilled. Used in the function to allow the user\\n     *                          to reconstruct the tx from events. Hash is stored\\n     *                          onchain to prevent shenanigans.\\n     * @param encodedBid The encoded bid that was accepted by the user for this\\n     *                   crosschain transfer. It is supplied as a param to the\\n     *                   function but is only used in event emission\\n     * @param bidSignature The signature of the bidder on the encoded bid for\\n     *                     this transaction. Only used within the function for\\n     *                     event emission. The validity of the bid and\\n     *                     bidSignature are enforced offchain\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct PrepareArgs {\\n        InvariantTransactionData invariantData;\\n        uint256 amount;\\n        uint256 expiry;\\n        bytes encryptedCallData;\\n        bytes encodedBid;\\n        bytes bidSignature;\\n        bytes encodedMeta;\\n    }\\n\\n    /**\\n     * @param txData All of the data (invariant and variant) for a crosschain\\n     *               transaction. The variant data provided is checked against\\n     *               what was stored when the `prepare` function was called.\\n     * @param relayerFee The fee that should go to the relayer when they are\\n     *                   calling the function on the receiving chain for the user\\n     * @param signature The users signature on the transaction id + fee that\\n     *                  can be used by the router to unlock the transaction on\\n     *                  the sending chain\\n     * @param callData The calldata to be sent to and executed by the\\n     *                 `FulfillHelper`\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct FulfillArgs {\\n        TransactionData txData;\\n        uint256 relayerFee;\\n        bytes signature;\\n        bytes callData;\\n        bytes encodedMeta;\\n    }\\n\\n    /**\\n     * Arguments for calling cancel()\\n     * @param txData All of the data (invariant and variant) for a crosschain\\n     *               transaction. The variant data provided is checked against\\n     *               what was stored when the `prepare` function was called.\\n     * @param signature The user's signature that allows a transaction to be\\n     *                  cancelled by a relayer\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct CancelArgs {\\n        TransactionData txData;\\n        bytes signature;\\n        bytes encodedMeta;\\n    }\\n\\n    // Adding/removing asset events\\n    event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n    event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n    // Adding/removing router events\\n    event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n    event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n    // Liquidity events\\n    event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\\n\\n    event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\\n\\n    // Transaction events\\n    event TransactionPrepared(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        TransactionData txData,\\n        address caller,\\n        PrepareArgs args\\n    );\\n\\n    event TransactionFulfilled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        FulfillArgs args,\\n        bool success,\\n        bool isContract,\\n        bytes returnData,\\n        address caller\\n    );\\n\\n    event TransactionCancelled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        CancelArgs args,\\n        address caller\\n    );\\n\\n    // Getters\\n    function getChainId() external view returns (uint256);\\n\\n    function getStoredChainId() external view returns (uint256);\\n\\n    // Owner only methods\\n    function addRouter(address router) external;\\n\\n    function removeRouter(address router) external;\\n\\n    function addAssetId(address assetId) external;\\n\\n    function removeAssetId(address assetId) external;\\n\\n    // Router only methods\\n    function addLiquidityFor(\\n        uint256 amount,\\n        address assetId,\\n        address router\\n    ) external payable;\\n\\n    function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        address assetId,\\n        address payable recipient\\n    ) external;\\n\\n    // Methods for crosschain transfers\\n    // called in the following order (in happy case)\\n    // 1. prepare by user on sending chain\\n    // 2. prepare by router on receiving chain\\n    // 3. fulfill by user on receiving chain\\n    // 4. fulfill by router on sending chain\\n    function prepare(PrepareArgs calldata args) external payable returns (TransactionData memory);\\n\\n    function fulfill(FulfillArgs calldata args) external returns (TransactionData memory);\\n\\n    function cancel(CancelArgs calldata args) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0xbf46be449c1ae9465c5d464cd102b1ac4ee038bfe20c693f3f5a9775a368b1b9\",\"license\":\"UNLICENSED\"},\"src/Libraries/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport { ITransactionManager } from \\\"../Interfaces/ITransactionManager.sol\\\";\\nimport { IHopBridge } from \\\"../Interfaces/IHopBridge.sol\\\";\\n\\nstruct AppStorage {\\n    ITransactionManager nxtpTxManager;\\n    mapping(string => IHopBridge.BridgeConfig) hopBridges;\\n    uint256 hopChainId;\\n    // Only add new variables *BELOW* the last variable\\n}\\n\",\"keccak256\":\"0xd8c2889e0a5e6e70ffe1228f397f6b0d3a8e6b08fc60209481be8478812f9bef\",\"license\":\"MIT\"},\"src/Libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LibAsset\\n * @author Connext <support@connext.network>\\n * @notice This library contains helpers for dealing with onchain transfers\\n *         of assets, including accounting for the native asset `assetId`\\n *         conventions and any noncompliant ERC20 transfers\\n */\\nlibrary LibAsset {\\n    /**\\n     * @dev All native assets use the empty address for their asset id\\n     *      by convention\\n     */\\n    address internal constant NATIVE_ASSETID = address(0);\\n\\n    /**\\n     * @notice Determines whether the given assetId is the native asset\\n     * @param assetId The asset identifier to evaluate\\n     * @return Boolean indicating if the asset is the native asset\\n     */\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the inheriting contract for the given asset\\n     * @param assetId The asset identifier to get the balance of\\n     * @return Balance held by contracts using this library\\n     */\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Transfers ether from the inheriting contract to a given\\n     *         recipient\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferNativeAsset(address payable recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"#TNA:028\\\");\\n    }\\n\\n    /**\\n     * @notice Gives approval for another address to spend tokens\\n     * @param assetId Token address to transfer\\n     * @param spender Address to give spend approval to\\n     * @param amount Amount to approve for spending\\n     */\\n    function approveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNativeAsset(address(assetId))) return;\\n\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n        if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0);\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the inheriting contract to a given\\n     *         recipient\\n     * @param assetId Token address to transfer\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from a sender to a given recipient\\n     * @param assetId Token address to transfer\\n     * @param from Address of sender/owner\\n     * @param to Address of recipient/spender\\n     * @param amount Amount to transfer from owner to spender\\n     */\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Increases the allowance of a token to a spender\\n     * @param assetId Token address of asset to increase allowance of\\n     * @param spender Account whos allowance is increased\\n     * @param amount Amount to increase allowance by\\n     */\\n    function increaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Decreases the allowance of a token to a spender\\n     * @param assetId Token address of asset to decrease allowance of\\n     * @param spender Account whos allowance is decreased\\n     * @param amount Amount to decrease allowance by\\n     */\\n    function decreaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n        SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Wrapper function to transfer a given asset (native or erc20) to\\n     *         some recipient. Should handle all non-compliant return value\\n     *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n     * @param assetId Asset id for transfer (address(0) for native asset,\\n     *                token address for erc20s)\\n     * @param recipient Address to send asset to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        isNativeAsset(assetId) ? transferNativeAsset(recipient, amount) : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x65aad5e9e1acc64e9b4fe1faefe91af550f816e0015cfdd1bec773cb905d1f7e\",\"license\":\"UNLICENSED\"},\"src/Libraries/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nlibrary LibBytes {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x0720c9d485f8d584c3168f49e61982737f8c4300fa3af75196ed87a6414d5c6c\",\"license\":\"MIT\"},\"src/Libraries/LibSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\nimport { LibUtil } from \\\"./LibUtil.sol\\\";\\n\\nlibrary LibSwap {\\n    struct SwapData {\\n        address callTo;\\n        address approveTo;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        uint256 fromAmount;\\n        bytes callData;\\n    }\\n\\n    event AssetSwapped(\\n        bytes32 transactionId,\\n        address dex,\\n        address fromAssetId,\\n        address toAssetId,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 timestamp\\n    );\\n\\n    function swap(bytes32 transactionId, SwapData calldata _swapData) internal {\\n        uint256 fromAmount = _swapData.fromAmount;\\n        uint256 toAmount = LibAsset.getOwnBalance(_swapData.receivingAssetId);\\n        address fromAssetId = _swapData.sendingAssetId;\\n        if (!LibAsset.isNativeAsset(fromAssetId) && LibAsset.getOwnBalance(fromAssetId) != fromAmount) {\\n            LibAsset.transferFromERC20(_swapData.sendingAssetId, msg.sender, address(this), fromAmount);\\n        }\\n\\n        LibAsset.approveERC20(IERC20(fromAssetId), _swapData.approveTo, fromAmount);\\n        (bool success, bytes memory res) = _swapData.callTo.call{ value: msg.value }(_swapData.callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert(reason);\\n        }\\n\\n        toAmount = LibAsset.getOwnBalance(_swapData.receivingAssetId) - toAmount;\\n        emit AssetSwapped(\\n            transactionId,\\n            _swapData.callTo,\\n            _swapData.sendingAssetId,\\n            _swapData.receivingAssetId,\\n            fromAmount,\\n            toAmount,\\n            block.timestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd6faa9ac5a68b55a0639a4a18c07f22c881c07d4f06daca8eee9c2084e249450\",\"license\":\"MIT\"},\"src/Libraries/LibUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./LibBytes.sol\\\";\\n\\nlibrary LibUtil {\\n    using LibBytes for bytes;\\n\\n    function getRevertMsg(bytes memory _res) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\n    }\\n}\\n\",\"keccak256\":\"0x0fbea85d89226b83c627bb788889ff6230156be49ed86662fa66716c327503d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c4c806100206000396000f3fe60806040526004361061004a5760003560e01c806328225f0c1461004f5780632a7a70421461006b5780634f7c96b5146100875780637d7aecd3146100b2578063cf76d313146100ce575b600080fd5b6100696004803603810190610064919061189d565b6100ea565b005b610085600480360381019061008091906119c4565b6101e2565b005b34801561009357600080fd5b5061009c61033a565b6040516100a991906121da565b60405180910390f35b6100cc60048036038101906100c79190611a70565b610366565b005b6100e860048036038101906100e39190611920565b6104f4565b005b6100f3836105d8565b1561013f5780341461013a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013190612503565b60405180910390fd5b61018f565b60003414610182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017990612403565b60405180910390fd5b61018e83333084610610565b5b61019a838383610622565b83600001517fb8c86983f929c6b770461983d1bbde1870408120f07123e9c12d49f35a0b4c4b848484426040516101d49493929190612255565b60405180910390a250505050565b60008160000160800160208101906101fa91906117fa565b905060006102078261064f565b905060005b858590508160ff1610156102625761024f876000015187878460ff16818110610238576102376128f1565b5b905060200281019061024a91906125c8565b6106f5565b808061025a90612898565b91505061020c565b50826101a00135816102738461064f565b61027d9190612792565b10156102be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b590612483565b60405180910390fd5b6102cc86600001518461091e565b85600001517f3b254a352757de129783dc1fcdea65d20e49fc091f974551e1dcb4afbf1fdc468760200151886040015189606001518a608001518b60a001518c60e001518d60c001514260405161032a98979695949392919061237e565b60405180910390a2505050505050565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081600001608001602081019061037e91906117fa565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561040157816101a0013534146103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612483565b60405180910390fd5b61047b565b600061040c8261064f565b905061041f823330866101a00135610610565b826101a001358161042f8461064f565b6104399190612792565b14610479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047090612483565b60405180910390fd5b505b61048983600001518361091e565b82600001517f3b254a352757de129783dc1fcdea65d20e49fc091f974551e1dcb4afbf1fdc4684602001518560400151866060015187608001518860a001518960e001518a60c00151426040516104e798979695949392919061237e565b60405180910390a2505050565b60006104ff8361064f565b905060005b858590508160ff16101561055a57610547876000015187878460ff168181106105305761052f6128f1565b5b905060200281019061054291906125c8565b6106f5565b808061055290612898565b915050610504565b5060006105668461064f565b905060008282111561058c57828261057e9190612792565b905061058b858583610622565b5b87600001517fb8c86983f929c6b770461983d1bbde1870408120f07123e9c12d49f35a0b4c4b868684426040516105c69493929190612255565b60405180910390a25050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61061c84848484610a81565b50505050565b61062b836105d8565b61063f5761063a838383610b0a565b61064a565b6106498282610b1a565b5b505050565b600061065a826105d8565b6106ec578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161069791906121da565b60206040518083038186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190611b16565b6106ee565b475b9050919050565b600081608001359050600061071b83606001602081019061071691906117fa565b61064f565b9050600083604001602081019061073291906117fa565b905061073d816105d8565b15801561075257508261074f8261064f565b14155b156107765761077584604001602081019061076d91906117fa565b333086610610565b5b6107938185602001602081019061078d91906117fa565b85610bcb565b6000808560000160208101906107a991906117fa565b73ffffffffffffffffffffffffffffffffffffffff1634878060a001906107d09190612565565b6040516107de929190612195565b60006040518083038185875af1925050503d806000811461081b576040519150601f19603f3d011682016040523d82523d6000602084013e610820565b606091505b50915091508161087457600061083582610c95565b9050806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b919061235c565b60405180910390fd5b8361089087606001602081019061088b91906117fa565b61064f565b61089a9190612792565b93507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b38878760000160208101906108d191906117fa565b8860400160208101906108e491906117fa565b8960600160208101906108f791906117fa565b89894260405161090d97969594939291906122c3565b60405180910390a150505050505050565b600081600001608001602081019061093691906117fa565b905061096c816000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846101a00135610bcb565b6000610977826105d8565b610982576000610984565b345b905060008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d945937283866040518363ffffffff1660e01b81526004016109e69190612543565b610200604051808303818588803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a399190611ae8565b9050847ff41c17e1ecd5e0c8547f6e40103b41a4a94721c4b4f1445206a69a58e563aa3582610140015183604051610a72929190612332565b60405180910390a25050505050565b610b04846323b872dd60e01b858585604051602401610aa29392919061221e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b50505050565b610b15838383610de8565b505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610b40906121c5565b60006040518083038185875af1925050503d8060008114610b7d576040519150601f19603f3d011682016040523d82523d6000602084013e610b82565b606091505b5050905080610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90612423565b60405180910390fd5b505050565b610bd4836105d8565b15610bde57610c90565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610c1b9291906121f5565b60206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190611b16565b90506000811115610c8357610c8284846000610e6e565b5b610c8e848484610fcc565b505b505050565b6060604482511015610cde576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c790000008152509050610d1c565b6000610d026004808551610cf29190612792565b856110ed9092919063ffffffff16565b905080806020019051810190610d189190611854565b9150505b919050565b6000610d83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661120b9092919063ffffffff16565b9050600081511115610de35780806020019051810190610da39190611827565b610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906124e3565b60405180910390fd5b5b505050565b610e698363a9059cbb60e01b8484604051602401610e0792919061229a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b505050565b6000811480610f07575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610eb59291906121f5565b60206040518083038186803b158015610ecd57600080fd5b505afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190611b16565b145b610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d90612523565b60405180910390fd5b610fc78363095ea7b360e01b8484604051602401610f6592919061229a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b815260040161100a9291906121f5565b60206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a9190611b16565b611064919061273c565b90506110e78463095ea7b360e01b858460405160240161108592919061229a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b50505050565b606081601f836110fd919061273c565b101561113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590612463565b60405180910390fd5b818361114a919061273c565b8451101561118d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611184906124c3565b60405180910390fd5b60608215600081146111ae57604051915060008252602082016040526111ff565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156111ec57805183526020830192506020810190506111cf565b50868552601f19601f8301166040525050505b50809150509392505050565b606061121a8484600085611223565b90509392505050565b606082471015611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90612443565b60405180910390fd5b61127185611337565b6112b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a7906124a3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112d991906121ae565b60006040518083038185875af1925050503d8060008114611316576040519150601f19603f3d011682016040523d82523d6000602084013e61131b565b606091505b509150915061132b82828661134a565b92505050949350505050565b600080823b905060008111915050919050565b6060831561135a578290506113aa565b60008351111561136d5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a1919061235c565b60405180910390fd5b9392505050565b60006113c46113bf84612615565b6125f0565b9050828152602081018484840111156113e0576113df612986565b5b6113eb848285612825565b509392505050565b600061140661140184612615565b6125f0565b90508281526020810184848401111561142257611421612986565b5b61142d848285612834565b509392505050565b60008135905061144481612bba565b92915050565b60008151905061145981612bba565b92915050565b60008083601f84011261147557611474612959565b5b8235905067ffffffffffffffff81111561149257611491612954565b5b6020830191508360208202830111156114ae576114ad61297c565b5b9250929050565b6000815190506114c481612bd1565b92915050565b6000813590506114d981612be8565b92915050565b6000815190506114ee81612be8565b92915050565b600082601f83011261150957611508612959565b5b81356115198482602086016113b1565b91505092915050565b600082601f83011261153757611536612959565b5b81516115478482602086016113f3565b91505092915050565b6000610100828403121561156757611566612968565b5b6115726101006125f0565b90506000611582848285016114ca565b600083015250602082013567ffffffffffffffff8111156115a6576115a5612977565b5b6115b2848285016114f4565b60208301525060406115c684828501611435565b60408301525060606115da84828501611435565b60608301525060806115ee84828501611435565b60808301525060a061160284828501611435565b60a08301525060c0611616848285016117d0565b60c08301525060e061162a848285016117d0565b60e08301525092915050565b6000610260828403121561164d5761164c612963565b5b81905092915050565b6000610200828403121561166d5761166c612968565b5b6116786102006125f0565b905060006116888482850161144a565b600083015250602061169c8482850161144a565b60208301525060406116b08482850161144a565b60408301525060606116c48482850161144a565b60608301525060806116d88482850161144a565b60808301525060a06116ec8482850161144a565b60a08301525060c06117008482850161144a565b60c08301525060e06117148482850161144a565b60e0830152506101006117298482850161144a565b6101008301525061012061173f848285016114df565b61012083015250610140611755848285016114df565b6101408301525061016061176b848285016117e5565b61016083015250610180611781848285016117e5565b610180830152506101a0611797848285016117e5565b6101a0830152506101c06117ad848285016117e5565b6101c0830152506101e06117c3848285016117e5565b6101e08301525092915050565b6000813590506117df81612bff565b92915050565b6000815190506117f481612bff565b92915050565b6000602082840312156118105761180f612995565b5b600061181e84828501611435565b91505092915050565b60006020828403121561183d5761183c612995565b5b600061184b848285016114b5565b91505092915050565b60006020828403121561186a57611869612995565b5b600082015167ffffffffffffffff8111156118885761188761298b565b5b61189484828501611522565b91505092915050565b600080600080608085870312156118b7576118b6612995565b5b600085013567ffffffffffffffff8111156118d5576118d461298b565b5b6118e187828801611550565b94505060206118f287828801611435565b935050604061190387828801611435565b9250506060611914878288016117d0565b91505092959194509250565b60008060008060006080868803121561193c5761193b612995565b5b600086013567ffffffffffffffff81111561195a5761195961298b565b5b61196688828901611550565b955050602086013567ffffffffffffffff8111156119875761198661298b565b5b6119938882890161145f565b945094505060406119a688828901611435565b92505060606119b788828901611435565b9150509295509295909350565b600080600080606085870312156119de576119dd612995565b5b600085013567ffffffffffffffff8111156119fc576119fb61298b565b5b611a0887828801611550565b945050602085013567ffffffffffffffff811115611a2957611a2861298b565b5b611a358782880161145f565b9350935050604085013567ffffffffffffffff811115611a5857611a5761298b565b5b611a6487828801611636565b91505092959194509250565b60008060408385031215611a8757611a86612995565b5b600083013567ffffffffffffffff811115611aa557611aa461298b565b5b611ab185828601611550565b925050602083013567ffffffffffffffff811115611ad257611ad161298b565b5b611ade85828601611636565b9150509250929050565b60006102008284031215611aff57611afe612995565b5b6000611b0d84828501611656565b91505092915050565b600060208284031215611b2c57611b2b612995565b5b6000611b3a848285016117e5565b91505092915050565b611b4c816127c6565b82525050565b611b5b816127c6565b82525050565b611b6a816127e4565b82525050565b611b79816127e4565b82525050565b6000611b8b838561265c565b9350611b98838584612825565b611ba18361299a565b840190509392505050565b6000611bb8838561266d565b9350611bc5838584612825565b82840190509392505050565b6000611bdc82612646565b611be6818561266d565b9350611bf6818560208601612834565b80840191505092915050565b6000611c0d82612651565b611c178185612678565b9350611c27818560208601612834565b611c308161299a565b840191505092915050565b6000611c48600c83612678565b9150611c53826129ab565b602082019050919050565b6000611c6b600883612678565b9150611c76826129d4565b602082019050919050565b6000611c8e602683612678565b9150611c99826129fd565b604082019050919050565b6000611cb1600e83612678565b9150611cbc82612a4c565b602082019050919050565b6000611cd4601283612678565b9150611cdf82612a75565b602082019050919050565b6000611cf760008361266d565b9150611d0282612a9e565b600082019050919050565b6000611d1a601d83612678565b9150611d2582612aa1565b602082019050919050565b6000611d3d601183612678565b9150611d4882612aca565b602082019050919050565b6000611d60602a83612678565b9150611d6b82612af3565b604082019050919050565b6000611d83601283612678565b9150611d8e82612b42565b602082019050919050565b6000611da6603683612678565b9150611db182612b6b565b604082019050919050565b6101a08201611dce6000830183612689565b611ddb6000850182611b43565b50611de96020830183612689565b611df66020850182611b43565b50611e046040830183612689565b611e116040850182611b43565b50611e1f6060830183612689565b611e2c6060850182611b43565b50611e3a6080830183612689565b611e476080850182611b43565b50611e5560a0830183612689565b611e6260a0850182611b43565b50611e7060c0830183612689565b611e7d60c0850182611b43565b50611e8b60e0830183612689565b611e9860e0850182611b43565b50611ea7610100830183612689565b611eb5610100850182611b43565b50611ec4610120830183612725565b611ed2610120850182612177565b50611ee1610140830183612725565b611eef610140850182612177565b50611efe6101608301836126a0565b611f0c610160850182611b61565b50611f1b6101808301836126a0565b611f29610180850182611b61565b50505050565b60006102608301611f43600084018461271a565b611f506000860182611dbc565b50611f5f6101a0840184612725565b611f6d6101a0860182612177565b50611f7c6101c0840184612725565b611f8a6101c0860182612177565b50611f996101e08401846126b7565b8583036101e0870152611fad838284611b7f565b92505050611fbf6102008401846126b7565b858303610200870152611fd3838284611b7f565b92505050611fe56102208401846126b7565b858303610220870152611ff9838284611b7f565b9250505061200b6102408401846126b7565b85830361024087015261201f838284611b7f565b925050508091505092915050565b610200820160008201516120446000850182611b43565b5060208201516120576020850182611b43565b50604082015161206a6040850182611b43565b50606082015161207d6060850182611b43565b5060808201516120906080850182611b43565b5060a08201516120a360a0850182611b43565b5060c08201516120b660c0850182611b43565b5060e08201516120c960e0850182611b43565b506101008201516120de610100850182611b43565b506101208201516120f3610120850182611b61565b50610140820151612108610140850182611b61565b5061016082015161211d610160850182612177565b50610180820151612132610180850182612177565b506101a08201516121476101a0850182612177565b506101c082015161215c6101c0850182612177565b506101e08201516121716101e0850182612177565b50505050565b6121808161280e565b82525050565b61218f8161280e565b82525050565b60006121a2828486611bac565b91508190509392505050565b60006121ba8284611bd1565b915081905092915050565b60006121d082611cea565b9150819050919050565b60006020820190506121ef6000830184611b52565b92915050565b600060408201905061220a6000830185611b52565b6122176020830184611b52565b9392505050565b60006060820190506122336000830186611b52565b6122406020830185611b52565b61224d6040830184612186565b949350505050565b600060808201905061226a6000830187611b52565b6122776020830186611b52565b6122846040830185612186565b6122916060830184612186565b95945050505050565b60006040820190506122af6000830185611b52565b6122bc6020830184612186565b9392505050565b600060e0820190506122d8600083018a611b70565b6122e56020830189611b52565b6122f26040830188611b52565b6122ff6060830187611b52565b61230c6080830186612186565b61231960a0830185612186565b61232660c0830184612186565b98975050505050505050565b6000610220820190506123486000830185611b70565b612355602083018461202d565b9392505050565b600060208201905081810360008301526123768184611c02565b905092915050565b6000610100820190508181036000830152612399818b611c02565b90506123a8602083018a611b52565b6123b56040830189611b52565b6123c26060830188611b52565b6123cf6080830187611b52565b6123dc60a0830186612186565b6123e960c0830185612186565b6123f660e0830184612186565b9998505050505050505050565b6000602082019050818103600083015261241c81611c3b565b9050919050565b6000602082019050818103600083015261243c81611c5e565b9050919050565b6000602082019050818103600083015261245c81611c81565b9050919050565b6000602082019050818103600083015261247c81611ca4565b9050919050565b6000602082019050818103600083015261249c81611cc7565b9050919050565b600060208201905081810360008301526124bc81611d0d565b9050919050565b600060208201905081810360008301526124dc81611d30565b9050919050565b600060208201905081810360008301526124fc81611d53565b9050919050565b6000602082019050818103600083015261251c81611d76565b9050919050565b6000602082019050818103600083015261253c81611d99565b9050919050565b6000602082019050818103600083015261255d8184611f2f565b905092915050565b600080833560016020038436030381126125825761258161296d565b5b80840192508235915067ffffffffffffffff8211156125a4576125a361295e565b5b6020830192506001820236038313156125c0576125bf612981565b5b509250929050565b60008235600160c0038336030381126125e4576125e361296d565b5b80830191505092915050565b60006125fa61260b565b90506126068282612867565b919050565b6000604051905090565b600067ffffffffffffffff8211156126305761262f612920565b5b6126398261299a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006126986020840184611435565b905092915050565b60006126af60208401846114ca565b905092915050565b600080833560016020038436030381126126d4576126d3612990565b5b83810192508235915060208301925067ffffffffffffffff8211156126fc576126fb61294f565b5b60018202360384131561271257612711612972565b5b509250929050565b600082905092915050565b600061273460208401846117d0565b905092915050565b60006127478261280e565b91506127528361280e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612787576127866128c2565b5b828201905092915050565b600061279d8261280e565b91506127a88361280e565b9250828210156127bb576127ba6128c2565b5b828203905092915050565b60006127d1826127ee565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612852578082015181840152602081019050612837565b83811115612861576000848401525b50505050565b6128708261299a565b810181811067ffffffffffffffff8211171561288f5761288e612920565b5b80604052505050565b60006128a382612818565b915060ff8214156128b7576128b66128c2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4554485f574954485f4552430000000000000000000000000000000000000000600082015250565b7f23544e413a303238000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b7f4552525f494e56414c49445f414d4f554e540000000000000000000000000000600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f494e56414c49445f4554485f414d4f554e540000000000000000000000000000600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b612bc3816127c6565b8114612bce57600080fd5b50565b612bda816127d8565b8114612be557600080fd5b50565b612bf1816127e4565b8114612bfc57600080fd5b50565b612c088161280e565b8114612c1357600080fd5b5056fea264697066735822122053b383fefef6734dfb55bded8d37e09e886799c623a4d19a7cb7635cdc5ed6db64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c806328225f0c1461004f5780632a7a70421461006b5780634f7c96b5146100875780637d7aecd3146100b2578063cf76d313146100ce575b600080fd5b6100696004803603810190610064919061189d565b6100ea565b005b610085600480360381019061008091906119c4565b6101e2565b005b34801561009357600080fd5b5061009c61033a565b6040516100a991906121da565b60405180910390f35b6100cc60048036038101906100c79190611a70565b610366565b005b6100e860048036038101906100e39190611920565b6104f4565b005b6100f3836105d8565b1561013f5780341461013a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013190612503565b60405180910390fd5b61018f565b60003414610182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017990612403565b60405180910390fd5b61018e83333084610610565b5b61019a838383610622565b83600001517fb8c86983f929c6b770461983d1bbde1870408120f07123e9c12d49f35a0b4c4b848484426040516101d49493929190612255565b60405180910390a250505050565b60008160000160800160208101906101fa91906117fa565b905060006102078261064f565b905060005b858590508160ff1610156102625761024f876000015187878460ff16818110610238576102376128f1565b5b905060200281019061024a91906125c8565b6106f5565b808061025a90612898565b91505061020c565b50826101a00135816102738461064f565b61027d9190612792565b10156102be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b590612483565b60405180910390fd5b6102cc86600001518461091e565b85600001517f3b254a352757de129783dc1fcdea65d20e49fc091f974551e1dcb4afbf1fdc468760200151886040015189606001518a608001518b60a001518c60e001518d60c001514260405161032a98979695949392919061237e565b60405180910390a2505050505050565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081600001608001602081019061037e91906117fa565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561040157816101a0013534146103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612483565b60405180910390fd5b61047b565b600061040c8261064f565b905061041f823330866101a00135610610565b826101a001358161042f8461064f565b6104399190612792565b14610479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047090612483565b60405180910390fd5b505b61048983600001518361091e565b82600001517f3b254a352757de129783dc1fcdea65d20e49fc091f974551e1dcb4afbf1fdc4684602001518560400151866060015187608001518860a001518960e001518a60c00151426040516104e798979695949392919061237e565b60405180910390a2505050565b60006104ff8361064f565b905060005b858590508160ff16101561055a57610547876000015187878460ff168181106105305761052f6128f1565b5b905060200281019061054291906125c8565b6106f5565b808061055290612898565b915050610504565b5060006105668461064f565b905060008282111561058c57828261057e9190612792565b905061058b858583610622565b5b87600001517fb8c86983f929c6b770461983d1bbde1870408120f07123e9c12d49f35a0b4c4b868684426040516105c69493929190612255565b60405180910390a25050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61061c84848484610a81565b50505050565b61062b836105d8565b61063f5761063a838383610b0a565b61064a565b6106498282610b1a565b5b505050565b600061065a826105d8565b6106ec578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161069791906121da565b60206040518083038186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190611b16565b6106ee565b475b9050919050565b600081608001359050600061071b83606001602081019061071691906117fa565b61064f565b9050600083604001602081019061073291906117fa565b905061073d816105d8565b15801561075257508261074f8261064f565b14155b156107765761077584604001602081019061076d91906117fa565b333086610610565b5b6107938185602001602081019061078d91906117fa565b85610bcb565b6000808560000160208101906107a991906117fa565b73ffffffffffffffffffffffffffffffffffffffff1634878060a001906107d09190612565565b6040516107de929190612195565b60006040518083038185875af1925050503d806000811461081b576040519150601f19603f3d011682016040523d82523d6000602084013e610820565b606091505b50915091508161087457600061083582610c95565b9050806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b919061235c565b60405180910390fd5b8361089087606001602081019061088b91906117fa565b61064f565b61089a9190612792565b93507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b38878760000160208101906108d191906117fa565b8860400160208101906108e491906117fa565b8960600160208101906108f791906117fa565b89894260405161090d97969594939291906122c3565b60405180910390a150505050505050565b600081600001608001602081019061093691906117fa565b905061096c816000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846101a00135610bcb565b6000610977826105d8565b610982576000610984565b345b905060008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d945937283866040518363ffffffff1660e01b81526004016109e69190612543565b610200604051808303818588803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a399190611ae8565b9050847ff41c17e1ecd5e0c8547f6e40103b41a4a94721c4b4f1445206a69a58e563aa3582610140015183604051610a72929190612332565b60405180910390a25050505050565b610b04846323b872dd60e01b858585604051602401610aa29392919061221e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b50505050565b610b15838383610de8565b505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610b40906121c5565b60006040518083038185875af1925050503d8060008114610b7d576040519150601f19603f3d011682016040523d82523d6000602084013e610b82565b606091505b5050905080610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90612423565b60405180910390fd5b505050565b610bd4836105d8565b15610bde57610c90565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610c1b9291906121f5565b60206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190611b16565b90506000811115610c8357610c8284846000610e6e565b5b610c8e848484610fcc565b505b505050565b6060604482511015610cde576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c790000008152509050610d1c565b6000610d026004808551610cf29190612792565b856110ed9092919063ffffffff16565b905080806020019051810190610d189190611854565b9150505b919050565b6000610d83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661120b9092919063ffffffff16565b9050600081511115610de35780806020019051810190610da39190611827565b610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906124e3565b60405180910390fd5b5b505050565b610e698363a9059cbb60e01b8484604051602401610e0792919061229a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b505050565b6000811480610f07575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610eb59291906121f5565b60206040518083038186803b158015610ecd57600080fd5b505afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190611b16565b145b610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d90612523565b60405180910390fd5b610fc78363095ea7b360e01b8484604051602401610f6592919061229a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b815260040161100a9291906121f5565b60206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a9190611b16565b611064919061273c565b90506110e78463095ea7b360e01b858460405160240161108592919061229a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b50505050565b606081601f836110fd919061273c565b101561113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590612463565b60405180910390fd5b818361114a919061273c565b8451101561118d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611184906124c3565b60405180910390fd5b60608215600081146111ae57604051915060008252602082016040526111ff565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156111ec57805183526020830192506020810190506111cf565b50868552601f19601f8301166040525050505b50809150509392505050565b606061121a8484600085611223565b90509392505050565b606082471015611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90612443565b60405180910390fd5b61127185611337565b6112b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a7906124a3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112d991906121ae565b60006040518083038185875af1925050503d8060008114611316576040519150601f19603f3d011682016040523d82523d6000602084013e61131b565b606091505b509150915061132b82828661134a565b92505050949350505050565b600080823b905060008111915050919050565b6060831561135a578290506113aa565b60008351111561136d5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a1919061235c565b60405180910390fd5b9392505050565b60006113c46113bf84612615565b6125f0565b9050828152602081018484840111156113e0576113df612986565b5b6113eb848285612825565b509392505050565b600061140661140184612615565b6125f0565b90508281526020810184848401111561142257611421612986565b5b61142d848285612834565b509392505050565b60008135905061144481612bba565b92915050565b60008151905061145981612bba565b92915050565b60008083601f84011261147557611474612959565b5b8235905067ffffffffffffffff81111561149257611491612954565b5b6020830191508360208202830111156114ae576114ad61297c565b5b9250929050565b6000815190506114c481612bd1565b92915050565b6000813590506114d981612be8565b92915050565b6000815190506114ee81612be8565b92915050565b600082601f83011261150957611508612959565b5b81356115198482602086016113b1565b91505092915050565b600082601f83011261153757611536612959565b5b81516115478482602086016113f3565b91505092915050565b6000610100828403121561156757611566612968565b5b6115726101006125f0565b90506000611582848285016114ca565b600083015250602082013567ffffffffffffffff8111156115a6576115a5612977565b5b6115b2848285016114f4565b60208301525060406115c684828501611435565b60408301525060606115da84828501611435565b60608301525060806115ee84828501611435565b60808301525060a061160284828501611435565b60a08301525060c0611616848285016117d0565b60c08301525060e061162a848285016117d0565b60e08301525092915050565b6000610260828403121561164d5761164c612963565b5b81905092915050565b6000610200828403121561166d5761166c612968565b5b6116786102006125f0565b905060006116888482850161144a565b600083015250602061169c8482850161144a565b60208301525060406116b08482850161144a565b60408301525060606116c48482850161144a565b60608301525060806116d88482850161144a565b60808301525060a06116ec8482850161144a565b60a08301525060c06117008482850161144a565b60c08301525060e06117148482850161144a565b60e0830152506101006117298482850161144a565b6101008301525061012061173f848285016114df565b61012083015250610140611755848285016114df565b6101408301525061016061176b848285016117e5565b61016083015250610180611781848285016117e5565b610180830152506101a0611797848285016117e5565b6101a0830152506101c06117ad848285016117e5565b6101c0830152506101e06117c3848285016117e5565b6101e08301525092915050565b6000813590506117df81612bff565b92915050565b6000815190506117f481612bff565b92915050565b6000602082840312156118105761180f612995565b5b600061181e84828501611435565b91505092915050565b60006020828403121561183d5761183c612995565b5b600061184b848285016114b5565b91505092915050565b60006020828403121561186a57611869612995565b5b600082015167ffffffffffffffff8111156118885761188761298b565b5b61189484828501611522565b91505092915050565b600080600080608085870312156118b7576118b6612995565b5b600085013567ffffffffffffffff8111156118d5576118d461298b565b5b6118e187828801611550565b94505060206118f287828801611435565b935050604061190387828801611435565b9250506060611914878288016117d0565b91505092959194509250565b60008060008060006080868803121561193c5761193b612995565b5b600086013567ffffffffffffffff81111561195a5761195961298b565b5b61196688828901611550565b955050602086013567ffffffffffffffff8111156119875761198661298b565b5b6119938882890161145f565b945094505060406119a688828901611435565b92505060606119b788828901611435565b9150509295509295909350565b600080600080606085870312156119de576119dd612995565b5b600085013567ffffffffffffffff8111156119fc576119fb61298b565b5b611a0887828801611550565b945050602085013567ffffffffffffffff811115611a2957611a2861298b565b5b611a358782880161145f565b9350935050604085013567ffffffffffffffff811115611a5857611a5761298b565b5b611a6487828801611636565b91505092959194509250565b60008060408385031215611a8757611a86612995565b5b600083013567ffffffffffffffff811115611aa557611aa461298b565b5b611ab185828601611550565b925050602083013567ffffffffffffffff811115611ad257611ad161298b565b5b611ade85828601611636565b9150509250929050565b60006102008284031215611aff57611afe612995565b5b6000611b0d84828501611656565b91505092915050565b600060208284031215611b2c57611b2b612995565b5b6000611b3a848285016117e5565b91505092915050565b611b4c816127c6565b82525050565b611b5b816127c6565b82525050565b611b6a816127e4565b82525050565b611b79816127e4565b82525050565b6000611b8b838561265c565b9350611b98838584612825565b611ba18361299a565b840190509392505050565b6000611bb8838561266d565b9350611bc5838584612825565b82840190509392505050565b6000611bdc82612646565b611be6818561266d565b9350611bf6818560208601612834565b80840191505092915050565b6000611c0d82612651565b611c178185612678565b9350611c27818560208601612834565b611c308161299a565b840191505092915050565b6000611c48600c83612678565b9150611c53826129ab565b602082019050919050565b6000611c6b600883612678565b9150611c76826129d4565b602082019050919050565b6000611c8e602683612678565b9150611c99826129fd565b604082019050919050565b6000611cb1600e83612678565b9150611cbc82612a4c565b602082019050919050565b6000611cd4601283612678565b9150611cdf82612a75565b602082019050919050565b6000611cf760008361266d565b9150611d0282612a9e565b600082019050919050565b6000611d1a601d83612678565b9150611d2582612aa1565b602082019050919050565b6000611d3d601183612678565b9150611d4882612aca565b602082019050919050565b6000611d60602a83612678565b9150611d6b82612af3565b604082019050919050565b6000611d83601283612678565b9150611d8e82612b42565b602082019050919050565b6000611da6603683612678565b9150611db182612b6b565b604082019050919050565b6101a08201611dce6000830183612689565b611ddb6000850182611b43565b50611de96020830183612689565b611df66020850182611b43565b50611e046040830183612689565b611e116040850182611b43565b50611e1f6060830183612689565b611e2c6060850182611b43565b50611e3a6080830183612689565b611e476080850182611b43565b50611e5560a0830183612689565b611e6260a0850182611b43565b50611e7060c0830183612689565b611e7d60c0850182611b43565b50611e8b60e0830183612689565b611e9860e0850182611b43565b50611ea7610100830183612689565b611eb5610100850182611b43565b50611ec4610120830183612725565b611ed2610120850182612177565b50611ee1610140830183612725565b611eef610140850182612177565b50611efe6101608301836126a0565b611f0c610160850182611b61565b50611f1b6101808301836126a0565b611f29610180850182611b61565b50505050565b60006102608301611f43600084018461271a565b611f506000860182611dbc565b50611f5f6101a0840184612725565b611f6d6101a0860182612177565b50611f7c6101c0840184612725565b611f8a6101c0860182612177565b50611f996101e08401846126b7565b8583036101e0870152611fad838284611b7f565b92505050611fbf6102008401846126b7565b858303610200870152611fd3838284611b7f565b92505050611fe56102208401846126b7565b858303610220870152611ff9838284611b7f565b9250505061200b6102408401846126b7565b85830361024087015261201f838284611b7f565b925050508091505092915050565b610200820160008201516120446000850182611b43565b5060208201516120576020850182611b43565b50604082015161206a6040850182611b43565b50606082015161207d6060850182611b43565b5060808201516120906080850182611b43565b5060a08201516120a360a0850182611b43565b5060c08201516120b660c0850182611b43565b5060e08201516120c960e0850182611b43565b506101008201516120de610100850182611b43565b506101208201516120f3610120850182611b61565b50610140820151612108610140850182611b61565b5061016082015161211d610160850182612177565b50610180820151612132610180850182612177565b506101a08201516121476101a0850182612177565b506101c082015161215c6101c0850182612177565b506101e08201516121716101e0850182612177565b50505050565b6121808161280e565b82525050565b61218f8161280e565b82525050565b60006121a2828486611bac565b91508190509392505050565b60006121ba8284611bd1565b915081905092915050565b60006121d082611cea565b9150819050919050565b60006020820190506121ef6000830184611b52565b92915050565b600060408201905061220a6000830185611b52565b6122176020830184611b52565b9392505050565b60006060820190506122336000830186611b52565b6122406020830185611b52565b61224d6040830184612186565b949350505050565b600060808201905061226a6000830187611b52565b6122776020830186611b52565b6122846040830185612186565b6122916060830184612186565b95945050505050565b60006040820190506122af6000830185611b52565b6122bc6020830184612186565b9392505050565b600060e0820190506122d8600083018a611b70565b6122e56020830189611b52565b6122f26040830188611b52565b6122ff6060830187611b52565b61230c6080830186612186565b61231960a0830185612186565b61232660c0830184612186565b98975050505050505050565b6000610220820190506123486000830185611b70565b612355602083018461202d565b9392505050565b600060208201905081810360008301526123768184611c02565b905092915050565b6000610100820190508181036000830152612399818b611c02565b90506123a8602083018a611b52565b6123b56040830189611b52565b6123c26060830188611b52565b6123cf6080830187611b52565b6123dc60a0830186612186565b6123e960c0830185612186565b6123f660e0830184612186565b9998505050505050505050565b6000602082019050818103600083015261241c81611c3b565b9050919050565b6000602082019050818103600083015261243c81611c5e565b9050919050565b6000602082019050818103600083015261245c81611c81565b9050919050565b6000602082019050818103600083015261247c81611ca4565b9050919050565b6000602082019050818103600083015261249c81611cc7565b9050919050565b600060208201905081810360008301526124bc81611d0d565b9050919050565b600060208201905081810360008301526124dc81611d30565b9050919050565b600060208201905081810360008301526124fc81611d53565b9050919050565b6000602082019050818103600083015261251c81611d76565b9050919050565b6000602082019050818103600083015261253c81611d99565b9050919050565b6000602082019050818103600083015261255d8184611f2f565b905092915050565b600080833560016020038436030381126125825761258161296d565b5b80840192508235915067ffffffffffffffff8211156125a4576125a361295e565b5b6020830192506001820236038313156125c0576125bf612981565b5b509250929050565b60008235600160c0038336030381126125e4576125e361296d565b5b80830191505092915050565b60006125fa61260b565b90506126068282612867565b919050565b6000604051905090565b600067ffffffffffffffff8211156126305761262f612920565b5b6126398261299a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006126986020840184611435565b905092915050565b60006126af60208401846114ca565b905092915050565b600080833560016020038436030381126126d4576126d3612990565b5b83810192508235915060208301925067ffffffffffffffff8211156126fc576126fb61294f565b5b60018202360384131561271257612711612972565b5b509250929050565b600082905092915050565b600061273460208401846117d0565b905092915050565b60006127478261280e565b91506127528361280e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612787576127866128c2565b5b828201905092915050565b600061279d8261280e565b91506127a88361280e565b9250828210156127bb576127ba6128c2565b5b828203905092915050565b60006127d1826127ee565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612852578082015181840152602081019050612837565b83811115612861576000848401525b50505050565b6128708261299a565b810181811067ffffffffffffffff8211171561288f5761288e612920565b5b80604052505050565b60006128a382612818565b915060ff8214156128b7576128b66128c2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4554485f574954485f4552430000000000000000000000000000000000000000600082015250565b7f23544e413a303238000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b7f4552525f494e56414c49445f414d4f554e540000000000000000000000000000600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f494e56414c49445f4554485f414d4f554e540000000000000000000000000000600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b612bc3816127c6565b8114612bce57600080fd5b50565b612bda816127d8565b8114612be557600080fd5b50565b612bf1816127e4565b8114612bfc57600080fd5b50565b612c088161280e565b8114612c1357600080fd5b5056fea264697066735822122053b383fefef6734dfb55bded8d37e09e886799c623a4d19a7cb7635cdc5ed6db64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "completeBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),address,address,uint256)": {
        "params": {
          "_lifiData": "data used purely for tracking and analytics",
          "amount": "number of tokens received",
          "assetId": "token received on the receiving chain",
          "receiver": "address that will receive the tokens"
        }
      },
      "startBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))": {
        "params": {
          "_lifiData": "data used purely for tracking and analytics",
          "_nxtpData": "data needed to complete an NXTP cross-chain transaction"
        }
      },
      "swapAndCompleteBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],address,address)": {
        "params": {
          "_lifiData": "data used purely for tracking and analytics",
          "_swapData": "array of data needed for swaps",
          "finalAssetId": "token received on the receiving chain",
          "receiver": "address that will receive the tokens"
        }
      },
      "swapAndStartBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))": {
        "params": {
          "_lifiData": "data used purely for tracking and analytics",
          "_nxtpData": "data needed to complete an NXTP cross-chain transaction",
          "_swapData": "array of data needed for swaps"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "completeBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),address,address,uint256)": {
        "notice": "Completes a cross-chain transaction on the receiving chain using the NXTP protocol."
      },
      "getNXTPTransactionManager()": {
        "notice": "show the NXTP transaction manager contract address"
      },
      "startBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))": {
        "notice": "This function starts a cross-chain transaction using the NXTP protocol"
      },
      "swapAndCompleteBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],address,address)": {
        "notice": "Performs a swap before completing a cross-chain transaction         on the receiving chain using the NXTP protocol."
      },
      "swapAndStartBridgeTokensViaNXTP((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))": {
        "notice": "This function performs a swap or multiple swaps and then starts a cross-chain transaction         using the NXTP protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1562,
        "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)2406_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITransactionManager)2389": {
        "encoding": "inplace",
        "label": "contract ITransactionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(BridgeConfig)2004_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IHopBridge.BridgeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(BridgeConfig)2004_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)2406_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 2398,
            "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
            "label": "nxtpTxManager",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ITransactionManager)2389"
          },
          {
            "astId": 2403,
            "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
            "label": "hopBridges",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_struct(BridgeConfig)2004_storage)"
          },
          {
            "astId": 2405,
            "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
            "label": "hopChainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(BridgeConfig)2004_storage": {
        "encoding": "inplace",
        "label": "struct IHopBridge.BridgeConfig",
        "members": [
          {
            "astId": 1999,
            "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2001,
            "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
            "label": "hToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2003,
            "contract": "src/Facets/NXTPFacet.sol:NXTPFacet",
            "label": "bridge",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}