{
  "address": "0xEAb38304A91185cfCD26b5D7c3028DFc928ce64b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "transactionId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "integrator",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LiFiTransferCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "transactionId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "integrator",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LiFiTransferStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "transactionId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fromAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        }
      ],
      "name": "startBridgeTokensViaHop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "transactionId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fromAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiFi.LiFiData",
          "name": "_lifiData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fromAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAssetId",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibLiFi.SwapData[]",
          "name": "_swapData",
          "type": "tuple[]"
        }
      ],
      "name": "swapAndStartBridgeTokensViaHop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ead0b5a8a7710889ea73e79e2e41a66164f812a457480b0433090c0d1908d66",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xCB1e9fA11Edd27098A6B2Ff23cB6b79183ccf8Ee",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1358637",
    "logsBloom": "0x
    "blockHash": "0x5f2ee906c1f535961dd95702db95f5adf1f59996d959c44ad7f6662f7a77e072",
    "transactionHash": "0x5ead0b5a8a7710889ea73e79e2e41a66164f812a457480b0433090c0d1908d66",
    "logs": [],
    "blockNumber": 5582919,
    "cumulativeGasUsed": "1436918",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9a8095dcaf909659bbc23a6408ff302a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferStarted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"}],\"name\":\"startBridgeTokensViaHop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"transactionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAssetId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibLiFi.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"}],\"name\":\"swapAndStartBridgeTokensViaHop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Facets/HopFacet.sol\":\"HopFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"src/Facets/HopFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibLiFi } from \\\"../Libraries/LibLiFi.sol\\\";\\n\\ncontract HopFacet is ILiFi {\\n    function startBridgeTokensViaHop(LiFiData memory _lifiData) public payable {\\n        // Do HOP stuff\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.fromAssetId,\\n            _lifiData.fromAmount,\\n            _lifiData.timestamp\\n        );\\n    }\\n\\n    function swapAndStartBridgeTokensViaHop(LiFiData memory _lifiData, LibLiFi.SwapData[] calldata _swapData)\\n        public\\n        payable\\n    {\\n        // Do Hop stuff\\n\\n        // Swap\\n        uint256 fromAmount = _lifiData.fromAmount;\\n        uint256 resultingBalance = 0;\\n        for (uint8 i; i < _swapData.length; i++) {\\n            resultingBalance = LibAsset.getOwnBalance(_swapData[i].toAssetId);\\n            LibLiFi.swap(fromAmount, _swapData[i]);\\n            resultingBalance = LibAsset.getOwnBalance(_swapData[i].toAssetId) - resultingBalance;\\n            fromAmount = resultingBalance;\\n        }\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.fromAssetId,\\n            _lifiData.fromAmount,\\n            _lifiData.timestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc7cab8cf53a355aec95517c9a6ba059c34c365a3f54c2ba363d797f247668088\",\"license\":\"MIT\"},\"src/Interfaces/ILiFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ILiFi {\\n    struct LiFiData {\\n        string transactionId;\\n        string integrator;\\n        address referrer;\\n        address fromAssetId;\\n        uint256 fromAmount;\\n        uint256 timestamp;\\n    }\\n\\n    event LiFiTransferStarted(\\n        string indexed transactionId,\\n        string integrator,\\n        address referrer,\\n        address fromAssetId,\\n        uint256 fromAmount,\\n        uint256 timestamp\\n    );\\n    event LiFiTransferCompleted(\\n        string indexed transactionId,\\n        string integrator,\\n        address referrer,\\n        address fromAssetId,\\n        uint256 fromAmount,\\n        uint256 timestamp\\n    );\\n}\\n\",\"keccak256\":\"0xcebfc74362a1febf01393519a877953ce57debc7e630cb645d9afa34a6d4c7da\",\"license\":\"MIT\"},\"src/Libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LibAsset\\n * @author Connext <support@connext.network>\\n * @notice This library contains helpers for dealing with onchain transfers\\n *         of assets, including accounting for the native asset `assetId`\\n *         conventions and any noncompliant ERC20 transfers\\n */\\nlibrary LibAsset {\\n    /**\\n     * @dev All native assets use the empty address for their asset id\\n     *      by convention\\n     */\\n    address internal constant NATIVE_ASSETID = address(0);\\n\\n    /**\\n     * @notice Determines whether the given assetId is the native asset\\n     * @param assetId The asset identifier to evaluate\\n     * @return Boolean indicating if the asset is the native asset\\n     */\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the inheriting contract for the given asset\\n     * @param assetId The asset identifier to get the balance of\\n     * @return Balance held by contracts using this library\\n     */\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Transfers ether from the inheriting contract to a given\\n     *         recipient\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferNativeAsset(address payable recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"#TNA:028\\\");\\n    }\\n\\n    /**\\n     * @notice Gives approval for another address to spend tokens\\n     * @param assetId Token address to transfer\\n     * @param spender Address to give spend approval to\\n     * @param amount Amount to approve for spending\\n     */\\n    function approveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNativeAsset(address(assetId))) return;\\n\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n        if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0);\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the inheriting contract to a given\\n     *         recipient\\n     * @param assetId Token address to transfer\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from a sender to a given recipient\\n     * @param assetId Token address to transfer\\n     * @param from Address of sender/owner\\n     * @param to Address of recipient/spender\\n     * @param amount Amount to transfer from owner to spender\\n     */\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Increases the allowance of a token to a spender\\n     * @param assetId Token address of asset to increase allowance of\\n     * @param spender Account whos allowance is increased\\n     * @param amount Amount to increase allowance by\\n     */\\n    function increaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Decreases the allowance of a token to a spender\\n     * @param assetId Token address of asset to decrease allowance of\\n     * @param spender Account whos allowance is decreased\\n     * @param amount Amount to decrease allowance by\\n     */\\n    function decreaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n        SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Wrapper function to transfer a given asset (native or erc20) to\\n     *         some recipient. Should handle all non-compliant return value\\n     *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n     * @param assetId Asset id for transfer (address(0) for native asset,\\n     *                token address for erc20s)\\n     * @param recipient Address to send asset to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        isNativeAsset(assetId) ? transferNativeAsset(recipient, amount) : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x65aad5e9e1acc64e9b4fe1faefe91af550f816e0015cfdd1bec773cb905d1f7e\",\"license\":\"UNLICENSED\"},\"src/Libraries/LibLiFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\n\\nlibrary LibLiFi {\\n    struct SwapData {\\n        address callTo;\\n        address fromAssetId;\\n        address toAssetId;\\n        bytes callData;\\n    }\\n\\n    event AssetSwapped(address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount);\\n\\n    function swap(uint256 fromAmount, SwapData calldata _swapData) internal {\\n        uint256 toAmount = LibAsset.getOwnBalance(_swapData.toAssetId);\\n        address fromAssetId = _swapData.fromAssetId;\\n        if (!LibAsset.isNativeAsset(fromAssetId) && LibAsset.getOwnBalance(fromAssetId) != fromAmount) {\\n            LibAsset.transferFromERC20(_swapData.fromAssetId, msg.sender, address(this), fromAmount);\\n        }\\n\\n        LibAsset.approveERC20(IERC20(fromAssetId), _swapData.callTo, fromAmount);\\n        (bool success, ) = _swapData.callTo.call{ value: msg.value }(_swapData.callData);\\n        require(success, \\\"ERR_DEX_SWAP_FAILED\\\");\\n\\n        toAmount = LibAsset.getOwnBalance(_swapData.toAssetId) - toAmount;\\n        emit AssetSwapped(_swapData.fromAssetId, _swapData.toAssetId, fromAmount, toAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x866ba08db477650e91dd1050ebb3998b727d1f87f7a6a0871f7d62e00163255c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117a4806100206000396000f3fe6080604052600436106100295760003560e01c806319da9f731461002e5780632a510bac1461004a575b600080fd5b61004860048036038101906100439190610db0565b610066565b005b610064600480360381019061005f9190610df9565b6100d6565b005b8060000151604051610078919061105f565b60405180910390207f1cc020d29788bb639e4d5184d2ae6152f6af036479333d7088b6c596e8a39db582602001518360400151846060015185608001518660a001516040516100cb959493929190611181565b60405180910390a250565b6000836080015190506000805b848490508160ff1610156101cb5761013385858360ff1681811061010a57610109611544565b5b905060200281019061011c91906112de565b604001602081019061012e9190610d56565b610240565b91506101668386868460ff1681811061014f5761014e611544565b5b905060200281019061016191906112de565b6102e6565b816101a986868460ff168181106101805761017f611544565b5b905060200281019061019291906112de565b60400160208101906101a49190610d56565b610240565b6101b391906113ef565b915081925080806101c3906114eb565b9150506100e3565b5084600001516040516101de919061105f565b60405180910390207f1cc020d29788bb639e4d5184d2ae6152f6af036479333d7088b6c596e8a39db586602001518760400151886060015189608001518a60a00151604051610231959493929190611181565b60405180910390a25050505050565b600061024b826104db565b6102dd578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102889190611076565b60206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190610e75565b6102df565b475b9050919050565b60006103038260400160208101906102fe9190610d56565b610240565b9050600082602001602081019061031a9190610d56565b9050610325816104db565b15801561033a57508361033782610240565b14155b1561035e5761035d8360200160208101906103559190610d56565b333087610513565b5b61037b818460000160208101906103759190610d56565b86610525565b60008360000160208101906103909190610d56565b73ffffffffffffffffffffffffffffffffffffffff16348580606001906103b7919061127b565b6040516103c592919061102f565b60006040518083038185875af1925050503d8060008114610402576040519150601f19603f3d011682016040523d82523d6000602084013e610407565b606091505b505090508061044b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610442906111fb565b60405180910390fd5b826104678560400160208101906104629190610d56565b610240565b61047191906113ef565b92507f4ac5df40d910feab74f02c4430568f99e711257906dd0df11643df22f2ee3cf68460200160208101906104a79190610d56565b8560400160208101906104ba9190610d56565b87866040516104cc94939291906110f1565b60405180910390a15050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61051f848484846105ef565b50505050565b61052e836104db565b15610538576105ea565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610575929190611091565b60206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190610e75565b905060008111156105dd576105dc84846000610678565b5b6105e88484846107d6565b505b505050565b610672846323b872dd60e01b858585604051602401610610939291906110ba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f7565b50505050565b6000811480610711575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016106bf929190611091565b60206040518083038186803b1580156106d757600080fd5b505afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190610e75565b145b610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061125b565b60405180910390fd5b6107d18363095ea7b360e01b848460405160240161076f929190611136565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f7565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401610814929190611091565b60206040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190610e75565b61086e9190611399565b90506108f18463095ea7b360e01b858460405160240161088f929190611136565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f7565b50505050565b6000610959826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109be9092919063ffffffff16565b90506000815111156109b957808060200190518101906109799190610d83565b6109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af9061123b565b60405180910390fd5b5b505050565b60606109cd84846000856109d6565b90509392505050565b606082471015610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a12906111db565b60405180910390fd5b610a2485610aea565b610a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5a9061121b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a8c9190611048565b60006040518083038185875af1925050503d8060008114610ac9576040519150601f19603f3d011682016040523d82523d6000602084013e610ace565b606091505b5091509150610ade828286610afd565b92505050949350505050565b600080823b905060008111915050919050565b60608315610b0d57829050610b5d565b600083511115610b205782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b54919061115f565b60405180910390fd5b9392505050565b6000610b77610b728461132b565b611306565b905082815260208101848484011115610b9357610b926115ca565b5b610b9e848285611478565b509392505050565b600081359050610bb581611729565b92915050565b60008083601f840112610bd157610bd06115a7565b5b8235905067ffffffffffffffff811115610bee57610bed6115a2565b5b602083019150836020820283011115610c0a57610c096115c0565b5b9250929050565b600081519050610c2081611740565b92915050565b600082601f830112610c3b57610c3a6115a7565b5b8135610c4b848260208601610b64565b91505092915050565b600060c08284031215610c6a57610c696115b1565b5b610c7460c0611306565b9050600082013567ffffffffffffffff811115610c9457610c936115bb565b5b610ca084828501610c26565b600083015250602082013567ffffffffffffffff811115610cc457610cc36115bb565b5b610cd084828501610c26565b6020830152506040610ce484828501610ba6565b6040830152506060610cf884828501610ba6565b6060830152506080610d0c84828501610d2c565b60808301525060a0610d2084828501610d2c565b60a08301525092915050565b600081359050610d3b81611757565b92915050565b600081519050610d5081611757565b92915050565b600060208284031215610d6c57610d6b6115d4565b5b6000610d7a84828501610ba6565b91505092915050565b600060208284031215610d9957610d986115d4565b5b6000610da784828501610c11565b91505092915050565b600060208284031215610dc657610dc56115d4565b5b600082013567ffffffffffffffff811115610de457610de36115cf565b5b610df084828501610c54565b91505092915050565b600080600060408486031215610e1257610e116115d4565b5b600084013567ffffffffffffffff811115610e3057610e2f6115cf565b5b610e3c86828701610c54565b935050602084013567ffffffffffffffff811115610e5d57610e5c6115cf565b5b610e6986828701610bbb565b92509250509250925092565b600060208284031215610e8b57610e8a6115d4565b5b6000610e9984828501610d41565b91505092915050565b610eab81611423565b82525050565b6000610ebd8385611372565b9350610eca838584611478565b82840190509392505050565b6000610ee18261135c565b610eeb8185611372565b9350610efb818560208601611487565b80840191505092915050565b6000610f1282611367565b610f1c818561137d565b9350610f2c818560208601611487565b610f35816115d9565b840191505092915050565b6000610f4b82611367565b610f55818561138e565b9350610f65818560208601611487565b80840191505092915050565b6000610f7e60268361137d565b9150610f89826115ea565b604082019050919050565b6000610fa160138361137d565b9150610fac82611639565b602082019050919050565b6000610fc4601d8361137d565b9150610fcf82611662565b602082019050919050565b6000610fe7602a8361137d565b9150610ff28261168b565b604082019050919050565b600061100a60368361137d565b9150611015826116da565b604082019050919050565b61102981611461565b82525050565b600061103c828486610eb1565b91508190509392505050565b60006110548284610ed6565b915081905092915050565b600061106b8284610f40565b915081905092915050565b600060208201905061108b6000830184610ea2565b92915050565b60006040820190506110a66000830185610ea2565b6110b36020830184610ea2565b9392505050565b60006060820190506110cf6000830186610ea2565b6110dc6020830185610ea2565b6110e96040830184611020565b949350505050565b60006080820190506111066000830187610ea2565b6111136020830186610ea2565b6111206040830185611020565b61112d6060830184611020565b95945050505050565b600060408201905061114b6000830185610ea2565b6111586020830184611020565b9392505050565b600060208201905081810360008301526111798184610f07565b905092915050565b600060a082019050818103600083015261119b8188610f07565b90506111aa6020830187610ea2565b6111b76040830186610ea2565b6111c46060830185611020565b6111d16080830184611020565b9695505050505050565b600060208201905081810360008301526111f481610f71565b9050919050565b6000602082019050818103600083015261121481610f94565b9050919050565b6000602082019050818103600083015261123481610fb7565b9050919050565b6000602082019050818103600083015261125481610fda565b9050919050565b6000602082019050818103600083015261127481610ffd565b9050919050565b60008083356001602003843603038112611298576112976115b6565b5b80840192508235915067ffffffffffffffff8211156112ba576112b96115ac565b5b6020830192506001820236038313156112d6576112d56115c5565b5b509250929050565b6000823560016080038336030381126112fa576112f96115b6565b5b80830191505092915050565b6000611310611321565b905061131c82826114ba565b919050565b6000604051905090565b600067ffffffffffffffff82111561134657611345611573565b5b61134f826115d9565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006113a482611461565b91506113af83611461565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113e4576113e3611515565b5b828201905092915050565b60006113fa82611461565b915061140583611461565b92508282101561141857611417611515565b5b828203905092915050565b600061142e82611441565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156114a557808201518184015260208101905061148a565b838111156114b4576000848401525b50505050565b6114c3826115d9565b810181811067ffffffffffffffff821117156114e2576114e1611573565b5b80604052505050565b60006114f68261146b565b915060ff82141561150a57611509611515565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552525f4445585f535741505f4641494c454400000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b61173281611423565b811461173d57600080fd5b50565b61174981611435565b811461175457600080fd5b50565b61176081611461565b811461176b57600080fd5b5056fea26469706673582212203f65cfe380172c8a575a74b12407b5e1e538962e77969ae4d394059eb845c4c064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c806319da9f731461002e5780632a510bac1461004a575b600080fd5b61004860048036038101906100439190610db0565b610066565b005b610064600480360381019061005f9190610df9565b6100d6565b005b8060000151604051610078919061105f565b60405180910390207f1cc020d29788bb639e4d5184d2ae6152f6af036479333d7088b6c596e8a39db582602001518360400151846060015185608001518660a001516040516100cb959493929190611181565b60405180910390a250565b6000836080015190506000805b848490508160ff1610156101cb5761013385858360ff1681811061010a57610109611544565b5b905060200281019061011c91906112de565b604001602081019061012e9190610d56565b610240565b91506101668386868460ff1681811061014f5761014e611544565b5b905060200281019061016191906112de565b6102e6565b816101a986868460ff168181106101805761017f611544565b5b905060200281019061019291906112de565b60400160208101906101a49190610d56565b610240565b6101b391906113ef565b915081925080806101c3906114eb565b9150506100e3565b5084600001516040516101de919061105f565b60405180910390207f1cc020d29788bb639e4d5184d2ae6152f6af036479333d7088b6c596e8a39db586602001518760400151886060015189608001518a60a00151604051610231959493929190611181565b60405180910390a25050505050565b600061024b826104db565b6102dd578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102889190611076565b60206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190610e75565b6102df565b475b9050919050565b60006103038260400160208101906102fe9190610d56565b610240565b9050600082602001602081019061031a9190610d56565b9050610325816104db565b15801561033a57508361033782610240565b14155b1561035e5761035d8360200160208101906103559190610d56565b333087610513565b5b61037b818460000160208101906103759190610d56565b86610525565b60008360000160208101906103909190610d56565b73ffffffffffffffffffffffffffffffffffffffff16348580606001906103b7919061127b565b6040516103c592919061102f565b60006040518083038185875af1925050503d8060008114610402576040519150601f19603f3d011682016040523d82523d6000602084013e610407565b606091505b505090508061044b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610442906111fb565b60405180910390fd5b826104678560400160208101906104629190610d56565b610240565b61047191906113ef565b92507f4ac5df40d910feab74f02c4430568f99e711257906dd0df11643df22f2ee3cf68460200160208101906104a79190610d56565b8560400160208101906104ba9190610d56565b87866040516104cc94939291906110f1565b60405180910390a15050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61051f848484846105ef565b50505050565b61052e836104db565b15610538576105ea565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610575929190611091565b60206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190610e75565b905060008111156105dd576105dc84846000610678565b5b6105e88484846107d6565b505b505050565b610672846323b872dd60e01b858585604051602401610610939291906110ba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f7565b50505050565b6000811480610711575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016106bf929190611091565b60206040518083038186803b1580156106d757600080fd5b505afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190610e75565b145b610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061125b565b60405180910390fd5b6107d18363095ea7b360e01b848460405160240161076f929190611136565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f7565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401610814929190611091565b60206040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190610e75565b61086e9190611399565b90506108f18463095ea7b360e01b858460405160240161088f929190611136565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f7565b50505050565b6000610959826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109be9092919063ffffffff16565b90506000815111156109b957808060200190518101906109799190610d83565b6109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af9061123b565b60405180910390fd5b5b505050565b60606109cd84846000856109d6565b90509392505050565b606082471015610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a12906111db565b60405180910390fd5b610a2485610aea565b610a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5a9061121b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a8c9190611048565b60006040518083038185875af1925050503d8060008114610ac9576040519150601f19603f3d011682016040523d82523d6000602084013e610ace565b606091505b5091509150610ade828286610afd565b92505050949350505050565b600080823b905060008111915050919050565b60608315610b0d57829050610b5d565b600083511115610b205782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b54919061115f565b60405180910390fd5b9392505050565b6000610b77610b728461132b565b611306565b905082815260208101848484011115610b9357610b926115ca565b5b610b9e848285611478565b509392505050565b600081359050610bb581611729565b92915050565b60008083601f840112610bd157610bd06115a7565b5b8235905067ffffffffffffffff811115610bee57610bed6115a2565b5b602083019150836020820283011115610c0a57610c096115c0565b5b9250929050565b600081519050610c2081611740565b92915050565b600082601f830112610c3b57610c3a6115a7565b5b8135610c4b848260208601610b64565b91505092915050565b600060c08284031215610c6a57610c696115b1565b5b610c7460c0611306565b9050600082013567ffffffffffffffff811115610c9457610c936115bb565b5b610ca084828501610c26565b600083015250602082013567ffffffffffffffff811115610cc457610cc36115bb565b5b610cd084828501610c26565b6020830152506040610ce484828501610ba6565b6040830152506060610cf884828501610ba6565b6060830152506080610d0c84828501610d2c565b60808301525060a0610d2084828501610d2c565b60a08301525092915050565b600081359050610d3b81611757565b92915050565b600081519050610d5081611757565b92915050565b600060208284031215610d6c57610d6b6115d4565b5b6000610d7a84828501610ba6565b91505092915050565b600060208284031215610d9957610d986115d4565b5b6000610da784828501610c11565b91505092915050565b600060208284031215610dc657610dc56115d4565b5b600082013567ffffffffffffffff811115610de457610de36115cf565b5b610df084828501610c54565b91505092915050565b600080600060408486031215610e1257610e116115d4565b5b600084013567ffffffffffffffff811115610e3057610e2f6115cf565b5b610e3c86828701610c54565b935050602084013567ffffffffffffffff811115610e5d57610e5c6115cf565b5b610e6986828701610bbb565b92509250509250925092565b600060208284031215610e8b57610e8a6115d4565b5b6000610e9984828501610d41565b91505092915050565b610eab81611423565b82525050565b6000610ebd8385611372565b9350610eca838584611478565b82840190509392505050565b6000610ee18261135c565b610eeb8185611372565b9350610efb818560208601611487565b80840191505092915050565b6000610f1282611367565b610f1c818561137d565b9350610f2c818560208601611487565b610f35816115d9565b840191505092915050565b6000610f4b82611367565b610f55818561138e565b9350610f65818560208601611487565b80840191505092915050565b6000610f7e60268361137d565b9150610f89826115ea565b604082019050919050565b6000610fa160138361137d565b9150610fac82611639565b602082019050919050565b6000610fc4601d8361137d565b9150610fcf82611662565b602082019050919050565b6000610fe7602a8361137d565b9150610ff28261168b565b604082019050919050565b600061100a60368361137d565b9150611015826116da565b604082019050919050565b61102981611461565b82525050565b600061103c828486610eb1565b91508190509392505050565b60006110548284610ed6565b915081905092915050565b600061106b8284610f40565b915081905092915050565b600060208201905061108b6000830184610ea2565b92915050565b60006040820190506110a66000830185610ea2565b6110b36020830184610ea2565b9392505050565b60006060820190506110cf6000830186610ea2565b6110dc6020830185610ea2565b6110e96040830184611020565b949350505050565b60006080820190506111066000830187610ea2565b6111136020830186610ea2565b6111206040830185611020565b61112d6060830184611020565b95945050505050565b600060408201905061114b6000830185610ea2565b6111586020830184611020565b9392505050565b600060208201905081810360008301526111798184610f07565b905092915050565b600060a082019050818103600083015261119b8188610f07565b90506111aa6020830187610ea2565b6111b76040830186610ea2565b6111c46060830185611020565b6111d16080830184611020565b9695505050505050565b600060208201905081810360008301526111f481610f71565b9050919050565b6000602082019050818103600083015261121481610f94565b9050919050565b6000602082019050818103600083015261123481610fb7565b9050919050565b6000602082019050818103600083015261125481610fda565b9050919050565b6000602082019050818103600083015261127481610ffd565b9050919050565b60008083356001602003843603038112611298576112976115b6565b5b80840192508235915067ffffffffffffffff8211156112ba576112b96115ac565b5b6020830192506001820236038313156112d6576112d56115c5565b5b509250929050565b6000823560016080038336030381126112fa576112f96115b6565b5b80830191505092915050565b6000611310611321565b905061131c82826114ba565b919050565b6000604051905090565b600067ffffffffffffffff82111561134657611345611573565b5b61134f826115d9565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006113a482611461565b91506113af83611461565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113e4576113e3611515565b5b828201905092915050565b60006113fa82611461565b915061140583611461565b92508282101561141857611417611515565b5b828203905092915050565b600061142e82611441565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156114a557808201518184015260208101905061148a565b838111156114b4576000848401525b50505050565b6114c3826115d9565b810181811067ffffffffffffffff821117156114e2576114e1611573565b5b80604052505050565b60006114f68261146b565b915060ff82141561150a57611509611515565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552525f4445585f535741505f4641494c454400000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b61173281611423565b811461173d57600080fd5b50565b61174981611435565b811461175457600080fd5b50565b61176081611461565b811461176b57600080fd5b5056fea26469706673582212203f65cfe380172c8a575a74b12407b5e1e538962e77969ae4d394059eb845c4c064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}