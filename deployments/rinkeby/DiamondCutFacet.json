{
  "address": "0x01610c51Fb79B3Dcb63c3783af757e44A784406e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "solcInputHash": "8c6332b6d666e6ad472a29fc695095d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IDiamondCut } from \\\"../Interfaces/IDiamondCut.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0xa8755d8419691e5ef07fdd9a5916aa1660b5787e041df466976988a4463b53f9\",\"license\":\"MIT\"},\"src/Interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x2c003c6c413ce1417fa1eefc0daf86b82d714f06de33fd28692712624bd4d104\",\"license\":\"MIT\"},\"src/Libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IDiamondCut } from \\\"../Interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x001ed2aa1e8a2823a85a79daca0c1c965703ab1c14933b17feb5c10e8923b539\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061272f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004a60048036038101906100459190611821565b61004c565b005b6100546100b6565b6100af858590610064919061207f565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610151565b5050505050565b6100be610383565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014690611d46565b60405180910390fd5b565b60005b835181101561033857600084828151811061017257610171612215565b5b602002602001015160200151905060006002811115610194576101936121b7565b5b8160028111156101a7576101a66121b7565b5b14156101f8576101f38583815181106101c3576101c2612215565b5b6020026020010151600001518684815181106101e2576101e1612215565b5b6020026020010151604001516103b0565b610324565b6001600281111561020c5761020b6121b7565b5b81600281111561021f5761021e6121b7565b5b14156102705761026b85838151811061023b5761023a612215565b5b60200260200101516000015186848151811061025a57610259612215565b5b602002602001015160400151610629565b610323565b600280811115610283576102826121b7565b5b816002811115610296576102956121b7565b5b14156102e7576102e28583815181106102b2576102b1612215565b5b6020026020010151600001518684815181106102d1576102d0612215565b5b6020026020010151604001516108ad565b610322565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031990611da6565b60405180910390fd5b5b5b5080806103309061210a565b915050610154565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161036c93929190611c9f565b60405180910390a161037e8282610a38565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb90611d66565b60405180910390fd5b60006103fe610383565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046790611dc6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1614156104de576104dd8285610c4b565b5b60005b83518110156106225760008482815181106104ff576104fe612215565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea90611e26565b60405180910390fd5b6105ff8583868a610d26565b838061060a90612153565b9450505050808061061a9061210a565b9150506104e1565b5050505050565b600081511161066d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066490611d66565b60405180910390fd5b6000610677610383565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e090611dc6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff161415610757576107568285610c4b565b5b60005b83518110156108a657600084828151811061077857610777612215565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086390611e46565b60405180910390fd5b610877858284610ed3565b6108838583868a610d26565b838061088e90612153565b9450505050808061089e9061210a565b91505061075a565b5050505050565b60008151116108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890611d66565b60405180910390fd5b60006108fb610383565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461096c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096390611e66565b60405180910390fd5b60005b8251811015610a3257600083828151811061098d5761098c612215565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a1d848284610ed3565b50508080610a2a9061210a565b91505061096f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab6576000815114610ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa890611d06565b60405180910390fd5b610c47565b6000815111610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611de6565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b5057610b4f826040518060600160405280602881526020016126ae60289139611538565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b789190611c88565b600060405180830381855af49150503d8060008114610bb3576040519150601f19603f3d011682016040523d82523d6000602084013e610bb8565b606091505b509150915081610c4457600081511115610c0957806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c009190611ce4565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611d26565b60405180910390fd5b50505b5050565b610c6d816040518060600160405280602481526020016126d660249139611538565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90611d86565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa990611e06565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506110899190611fb8565b905080821461121d5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481106110ea576110e9612215565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001848154811061116657611165612215565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480611271576112706121e6565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008114156115315760006001866002018054905061135c9190611fb8565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461149d5760008760020183815481106113c6576113c5612215565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600201838154811061140a57611409612215565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b866002018054806114b1576114b06121e6565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b9050600081118290611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b9190611ce4565b60405180910390fd5b50505050565b600061159d61159884611eab565b611e86565b905080838252602082019050828560208602820111156115c0576115bf612287565b5b60005b858110156115f057816115d68882611721565b8452602084019350602083019250506001810190506115c3565b5050509392505050565b600061160d61160884611ed7565b611e86565b905080838252602082019050828560208602820111156116305761162f612287565b5b60005b8581101561167e57813567ffffffffffffffff81111561165657611655612278565b5b80860161166389826117a1565b85526020850194506020840193505050600181019050611633565b5050509392505050565b6000813590506116978161266f565b92915050565b600082601f8301126116b2576116b1612278565b5b81356116c284826020860161158a565b91505092915050565b60008083601f8401126116e1576116e0612278565b5b8235905067ffffffffffffffff8111156116fe576116fd612273565b5b60208301915083602082028301111561171a57611719612287565b5b9250929050565b60008135905061173081612686565b92915050565b60008083601f84011261174c5761174b612278565b5b8235905067ffffffffffffffff81111561176957611768612273565b5b60208301915083600182028301111561178557611784612287565b5b9250929050565b60008135905061179b8161269d565b92915050565b6000606082840312156117b7576117b661227d565b5b6117c16060611e86565b905060006117d184828501611688565b60008301525060206117e58482850161178c565b602083015250604082013567ffffffffffffffff81111561180957611808612282565b5b6118158482850161169d565b60408301525092915050565b60008060008060006060868803121561183d5761183c612291565b5b600086013567ffffffffffffffff81111561185b5761185a61228c565b5b611867888289016116cb565b9550955050602061187a88828901611688565b935050604086013567ffffffffffffffff81111561189b5761189a61228c565b5b6118a788828901611736565b92509250509295509295909350565b60006118c283836119d3565b60208301905092915050565b60006118da8383611c38565b905092915050565b6118eb81611fec565b82525050565b6118fa81611fec565b82525050565b600061190b82611f23565b6119158185611f69565b935061192083611f03565b8060005b8381101561195157815161193888826118b6565b975061194383611f4f565b925050600181019050611924565b5085935050505092915050565b600061196982611f2e565b6119738185611f7a565b93508360208202850161198585611f13565b8060005b858110156119c157848403895281516119a285826118ce565b94506119ad83611f5c565b925060208a01995050600181019050611989565b50829750879550505050505092915050565b6119dc81611ffe565b82525050565b60006119ed82611f39565b6119f78185611f8b565b9350611a078185602086016120a6565b611a1081612296565b840191505092915050565b6000611a2682611f39565b611a308185611f9c565b9350611a408185602086016120a6565b80840191505092915050565b611a5581612094565b82525050565b6000611a6682611f44565b611a708185611fa7565b9350611a808185602086016120a6565b611a8981612296565b840191505092915050565b6000611aa1603c83611fa7565b9150611aac826122a7565b604082019050919050565b6000611ac4602683611fa7565b9150611acf826122f6565b604082019050919050565b6000611ae7602283611fa7565b9150611af282612345565b604082019050919050565b6000611b0a602b83611fa7565b9150611b1582612394565b604082019050919050565b6000611b2d603783611fa7565b9150611b38826123e3565b604082019050919050565b6000611b50602783611fa7565b9150611b5b82612432565b604082019050919050565b6000611b73602c83611fa7565b9150611b7e82612481565b604082019050919050565b6000611b96603d83611fa7565b9150611ba1826124d0565b604082019050919050565b6000611bb9602e83611fa7565b9150611bc48261251f565b604082019050919050565b6000611bdc603583611fa7565b9150611be78261256e565b604082019050919050565b6000611bff603883611fa7565b9150611c0a826125bd565b604082019050919050565b6000611c22603683611fa7565b9150611c2d8261260c565b604082019050919050565b6000606083016000830151611c5060008601826118e2565b506020830151611c636020860182611a4c565b5060408301518482036040860152611c7b8282611900565b9150508091505092915050565b6000611c948284611a1b565b915081905092915050565b60006060820190508181036000830152611cb9818661195e565b9050611cc860208301856118f1565b8181036040830152611cda81846119e2565b9050949350505050565b60006020820190508181036000830152611cfe8184611a5b565b905092915050565b60006020820190508181036000830152611d1f81611a94565b9050919050565b60006020820190508181036000830152611d3f81611ab7565b9050919050565b60006020820190508181036000830152611d5f81611ada565b9050919050565b60006020820190508181036000830152611d7f81611afd565b9050919050565b60006020820190508181036000830152611d9f81611b20565b9050919050565b60006020820190508181036000830152611dbf81611b43565b9050919050565b60006020820190508181036000830152611ddf81611b66565b9050919050565b60006020820190508181036000830152611dff81611b89565b9050919050565b60006020820190508181036000830152611e1f81611bac565b9050919050565b60006020820190508181036000830152611e3f81611bcf565b9050919050565b60006020820190508181036000830152611e5f81611bf2565b9050919050565b60006020820190508181036000830152611e7f81611c15565b9050919050565b6000611e90611ea1565b9050611e9c82826120d9565b919050565b6000604051905090565b600067ffffffffffffffff821115611ec657611ec5612244565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611ef257611ef1612244565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611fc38261205d565b9150611fce8361205d565b925082821015611fe157611fe0612188565b5b828203905092915050565b6000611ff78261203d565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008190506120388261265b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b600061208c3684846115fa565b905092915050565b600061209f8261202a565b9050919050565b60005b838110156120c45780820151818401526020810190506120a9565b838111156120d3576000848401525b50505050565b6120e282612296565b810181811067ffffffffffffffff8211171561210157612100612244565b5b80604052505050565b60006121158261205d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561214857612147612188565b5b600182019050919050565b600061215e82612067565b91506bffffffffffffffffffffffff82141561217d5761217c612188565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860008201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000602082015250565b7f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560008201527f7665727465640000000000000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660008201527f6163657420746f20637574000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360008201527f74696f6e207468617420646f65736e2774206578697374000000000000000000602082015250565b7f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560008201527f74416374696f6e00000000000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260008201527f6520616464726573732830290000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460008201527f7920627574205f696e6974206973206e6f742061646472657373283029000000602082015250565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560008201527f7461626c652066756e6374696f6e000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60008201527f6e207468617420616c7265616479206578697374730000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60008201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000602082015250565b7f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260008201527f657373206d757374206265206164647265737328302900000000000000000000602082015250565b6003811061266c5761266b6121b7565b5b50565b61267881611fec565b811461268357600080fd5b50565b61268f81611ffe565b811461269a57600080fd5b50565b600381106126aa57600080fd5b5056fe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220b012da6bd2c70e7ad45b1f9b461a6ac370a2844e56949711080a90aec8e1111264736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004a60048036038101906100459190611821565b61004c565b005b6100546100b6565b6100af858590610064919061207f565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610151565b5050505050565b6100be610383565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014690611d46565b60405180910390fd5b565b60005b835181101561033857600084828151811061017257610171612215565b5b602002602001015160200151905060006002811115610194576101936121b7565b5b8160028111156101a7576101a66121b7565b5b14156101f8576101f38583815181106101c3576101c2612215565b5b6020026020010151600001518684815181106101e2576101e1612215565b5b6020026020010151604001516103b0565b610324565b6001600281111561020c5761020b6121b7565b5b81600281111561021f5761021e6121b7565b5b14156102705761026b85838151811061023b5761023a612215565b5b60200260200101516000015186848151811061025a57610259612215565b5b602002602001015160400151610629565b610323565b600280811115610283576102826121b7565b5b816002811115610296576102956121b7565b5b14156102e7576102e28583815181106102b2576102b1612215565b5b6020026020010151600001518684815181106102d1576102d0612215565b5b6020026020010151604001516108ad565b610322565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031990611da6565b60405180910390fd5b5b5b5080806103309061210a565b915050610154565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161036c93929190611c9f565b60405180910390a161037e8282610a38565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb90611d66565b60405180910390fd5b60006103fe610383565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046790611dc6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1614156104de576104dd8285610c4b565b5b60005b83518110156106225760008482815181106104ff576104fe612215565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea90611e26565b60405180910390fd5b6105ff8583868a610d26565b838061060a90612153565b9450505050808061061a9061210a565b9150506104e1565b5050505050565b600081511161066d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066490611d66565b60405180910390fd5b6000610677610383565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e090611dc6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff161415610757576107568285610c4b565b5b60005b83518110156108a657600084828151811061077857610777612215565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086390611e46565b60405180910390fd5b610877858284610ed3565b6108838583868a610d26565b838061088e90612153565b9450505050808061089e9061210a565b91505061075a565b5050505050565b60008151116108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890611d66565b60405180910390fd5b60006108fb610383565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461096c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096390611e66565b60405180910390fd5b60005b8251811015610a3257600083828151811061098d5761098c612215565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a1d848284610ed3565b50508080610a2a9061210a565b91505061096f565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab6576000815114610ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa890611d06565b60405180910390fd5b610c47565b6000815111610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611de6565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b5057610b4f826040518060600160405280602881526020016126ae60289139611538565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b789190611c88565b600060405180830381855af49150503d8060008114610bb3576040519150601f19603f3d011682016040523d82523d6000602084013e610bb8565b606091505b509150915081610c4457600081511115610c0957806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c009190611ce4565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611d26565b60405180910390fd5b50505b5050565b610c6d816040518060600160405280602481526020016126d660249139611538565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90611d86565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa990611e06565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506110899190611fb8565b905080821461121d5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481106110ea576110e9612215565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001848154811061116657611165612215565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480611271576112706121e6565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008114156115315760006001866002018054905061135c9190611fb8565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461149d5760008760020183815481106113c6576113c5612215565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600201838154811061140a57611409612215565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b866002018054806114b1576114b06121e6565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b9050600081118290611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b9190611ce4565b60405180910390fd5b50505050565b600061159d61159884611eab565b611e86565b905080838252602082019050828560208602820111156115c0576115bf612287565b5b60005b858110156115f057816115d68882611721565b8452602084019350602083019250506001810190506115c3565b5050509392505050565b600061160d61160884611ed7565b611e86565b905080838252602082019050828560208602820111156116305761162f612287565b5b60005b8581101561167e57813567ffffffffffffffff81111561165657611655612278565b5b80860161166389826117a1565b85526020850194506020840193505050600181019050611633565b5050509392505050565b6000813590506116978161266f565b92915050565b600082601f8301126116b2576116b1612278565b5b81356116c284826020860161158a565b91505092915050565b60008083601f8401126116e1576116e0612278565b5b8235905067ffffffffffffffff8111156116fe576116fd612273565b5b60208301915083602082028301111561171a57611719612287565b5b9250929050565b60008135905061173081612686565b92915050565b60008083601f84011261174c5761174b612278565b5b8235905067ffffffffffffffff81111561176957611768612273565b5b60208301915083600182028301111561178557611784612287565b5b9250929050565b60008135905061179b8161269d565b92915050565b6000606082840312156117b7576117b661227d565b5b6117c16060611e86565b905060006117d184828501611688565b60008301525060206117e58482850161178c565b602083015250604082013567ffffffffffffffff81111561180957611808612282565b5b6118158482850161169d565b60408301525092915050565b60008060008060006060868803121561183d5761183c612291565b5b600086013567ffffffffffffffff81111561185b5761185a61228c565b5b611867888289016116cb565b9550955050602061187a88828901611688565b935050604086013567ffffffffffffffff81111561189b5761189a61228c565b5b6118a788828901611736565b92509250509295509295909350565b60006118c283836119d3565b60208301905092915050565b60006118da8383611c38565b905092915050565b6118eb81611fec565b82525050565b6118fa81611fec565b82525050565b600061190b82611f23565b6119158185611f69565b935061192083611f03565b8060005b8381101561195157815161193888826118b6565b975061194383611f4f565b925050600181019050611924565b5085935050505092915050565b600061196982611f2e565b6119738185611f7a565b93508360208202850161198585611f13565b8060005b858110156119c157848403895281516119a285826118ce565b94506119ad83611f5c565b925060208a01995050600181019050611989565b50829750879550505050505092915050565b6119dc81611ffe565b82525050565b60006119ed82611f39565b6119f78185611f8b565b9350611a078185602086016120a6565b611a1081612296565b840191505092915050565b6000611a2682611f39565b611a308185611f9c565b9350611a408185602086016120a6565b80840191505092915050565b611a5581612094565b82525050565b6000611a6682611f44565b611a708185611fa7565b9350611a808185602086016120a6565b611a8981612296565b840191505092915050565b6000611aa1603c83611fa7565b9150611aac826122a7565b604082019050919050565b6000611ac4602683611fa7565b9150611acf826122f6565b604082019050919050565b6000611ae7602283611fa7565b9150611af282612345565b604082019050919050565b6000611b0a602b83611fa7565b9150611b1582612394565b604082019050919050565b6000611b2d603783611fa7565b9150611b38826123e3565b604082019050919050565b6000611b50602783611fa7565b9150611b5b82612432565b604082019050919050565b6000611b73602c83611fa7565b9150611b7e82612481565b604082019050919050565b6000611b96603d83611fa7565b9150611ba1826124d0565b604082019050919050565b6000611bb9602e83611fa7565b9150611bc48261251f565b604082019050919050565b6000611bdc603583611fa7565b9150611be78261256e565b604082019050919050565b6000611bff603883611fa7565b9150611c0a826125bd565b604082019050919050565b6000611c22603683611fa7565b9150611c2d8261260c565b604082019050919050565b6000606083016000830151611c5060008601826118e2565b506020830151611c636020860182611a4c565b5060408301518482036040860152611c7b8282611900565b9150508091505092915050565b6000611c948284611a1b565b915081905092915050565b60006060820190508181036000830152611cb9818661195e565b9050611cc860208301856118f1565b8181036040830152611cda81846119e2565b9050949350505050565b60006020820190508181036000830152611cfe8184611a5b565b905092915050565b60006020820190508181036000830152611d1f81611a94565b9050919050565b60006020820190508181036000830152611d3f81611ab7565b9050919050565b60006020820190508181036000830152611d5f81611ada565b9050919050565b60006020820190508181036000830152611d7f81611afd565b9050919050565b60006020820190508181036000830152611d9f81611b20565b9050919050565b60006020820190508181036000830152611dbf81611b43565b9050919050565b60006020820190508181036000830152611ddf81611b66565b9050919050565b60006020820190508181036000830152611dff81611b89565b9050919050565b60006020820190508181036000830152611e1f81611bac565b9050919050565b60006020820190508181036000830152611e3f81611bcf565b9050919050565b60006020820190508181036000830152611e5f81611bf2565b9050919050565b60006020820190508181036000830152611e7f81611c15565b9050919050565b6000611e90611ea1565b9050611e9c82826120d9565b919050565b6000604051905090565b600067ffffffffffffffff821115611ec657611ec5612244565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611ef257611ef1612244565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611fc38261205d565b9150611fce8361205d565b925082821015611fe157611fe0612188565b5b828203905092915050565b6000611ff78261203d565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008190506120388261265b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b600061208c3684846115fa565b905092915050565b600061209f8261202a565b9050919050565b60005b838110156120c45780820151818401526020810190506120a9565b838111156120d3576000848401525b50505050565b6120e282612296565b810181811067ffffffffffffffff8211171561210157612100612244565b5b80604052505050565b60006121158261205d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561214857612147612188565b5b600182019050919050565b600061215e82612067565b91506bffffffffffffffffffffffff82141561217d5761217c612188565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860008201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000602082015250565b7f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560008201527f7665727465640000000000000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660008201527f6163657420746f20637574000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360008201527f74696f6e207468617420646f65736e2774206578697374000000000000000000602082015250565b7f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560008201527f74416374696f6e00000000000000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260008201527f6520616464726573732830290000000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460008201527f7920627574205f696e6974206973206e6f742061646472657373283029000000602082015250565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560008201527f7461626c652066756e6374696f6e000000000000000000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60008201527f6e207468617420616c7265616479206578697374730000000000000000000000602082015250565b7f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60008201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000602082015250565b7f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260008201527f657373206d757374206265206164647265737328302900000000000000000000602082015250565b6003811061266c5761266b6121b7565b5b50565b61267881611fec565b811461268357600080fd5b50565b61268f81611ffe565b811461269a57600080fd5b50565b600381106126aa57600080fd5b5056fe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220b012da6bd2c70e7ad45b1f9b461a6ac370a2844e56949711080a90aec8e1111264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}